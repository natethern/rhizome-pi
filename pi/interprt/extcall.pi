; Copyright (c) 1996-99 Inujima, Masaru <qfwfq@kt.rim.or.jp>
;
; Permission to use, copy, modify, and distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

;;;; @(#)$Id: extcall.pi,v 1.4 2004/08/06 05:48:06 qfwfq Exp $
; $Log: extcall.pi,v $
; Revision 1.4  2004/08/06 05:48:06  qfwfq
; change license, using OpenBSD:/usr/share/misc/license.template
;
; Revision 1.3  1999/06/15 07:24:10  qfwfq
; Add packed buffer
;
; Revision 1.2  1998/07/31 11:29:24  qfwfq
; Features addition for release 0.45
;
; Revision 1.1  1997/10/16 06:25:30  qfwfq
; Release version 0.40
;

(define-syntax rp:entry->procedure
  (lambda (x)
    (define (make-argdesc args)
      (syntax-case args ()
	(() (syntax (() ())))
	((arg . rest)
	 (with-syntax (((formals desc) (make-argdesc (syntax rest))) ((x) (generate-temporaries (syntax (arg)))))
	   (let ((type (syntax-object->datum (syntax arg))))
	     (cond ((rp:assq type '((integer . 0) (cardinal . 1) (string . 4) (buffer . 5) (procedure . 6))) =>
		    (lambda (p) (with-syntax ((code (rp:cdr p))) (syntax ((x . formals) (code x . desc))))))
		   ((rp:eq? type 'float) (syntax ((x . formals) (2 (rp:void) 3 x . desc))))
		   (else (syntax-error type "unknown argument type"))))))))
    (syntax-case x ()
      ((_ entry return (arg ...))
       (with-syntax (((formals desc) (make-argdesc (syntax (arg ...)))))
	 (let ((rtype (syntax-object->datum (syntax return))))
	   (cond ((rp:assq rtype '((integer . 0) (cardinal . 1) (buffer . 5) (procedure . 6))) =>
		  (lambda (p)
		    (with-syntax ((rcode (rp:cdr p)))
		      (syntax (let ((e entry))
				(lambda formals
				  (rp:load-external-value
				    (rp:call-external-procedure e (rp:external-arguments . desc))
				    rcode)))))))
		 ((rp:eq? rtype 'effect)
		  (syntax (let ((e entry) (v (rp:void)))
			    (lambda formals
			      (rp:call-external-procedure e (rp:external-arguments . desc))
			      v))))
		 (else (syntax-error rtype "unknown return value type")))))))))

(define-syntax rp:external-procedure
  (lambda (x)
    (syntax-case x ()
      ((_ module name return args)
       (syntax (rp:entry->procedure (rp:import-procedure module name) return args))))))

(define-syntax rp:make-entry
  (lambda (x)
    (define (encode-aspec params rpara na)
      (syntax-case params ()
	(() (with-syntax ((rpara rpara) (na na)) (syntax (na rpara ()))))
	(((type formal) . rest)
	 (let ((type (syntax-object->datum (syntax type))))
	   (cond ((rp:assq type '((integer . 0) (cardinal . 1) (buffer . 5) (procedure . 6))) =>
		  (lambda (p)
		    (with-syntax ((rpara rpara) (code (rp:cdr p)))
		      (with-syntax (((narg plist aspec)
				     (encode-aspec (syntax rest) (syntax (formal . rpara)) (rp:+ na 1))))
			(syntax (narg plist (code . aspec)))))))
		 ((rp:eq? type 'float)
		  (with-syntax ((rpara rpara))
		    (with-syntax (((narg plist aspec)
				   (encode-aspec (syntax rest) (syntax (formal . rpara)) (rp:+ na 2))))
		      (syntax (narg plist (2 . aspec))))))
		 (else (syntax-error type "unknown callback argument type")))))))
    (syntax-case x ()
      ((_ return ((formal type) ...) body ...)
       (with-syntax (((narg plist aspec) (encode-aspec (syntax ((type formal) ...)) (syntax ()) 0)))
	 (let ((rtype (syntax-object->datum (syntax return))))
	   (cond ((rp:assq rtype '((integer . 0) (cardinal . 1) (string . 4) (buffer . 5) (procedure . 6))) =>
		  (lambda (p)
		    (with-syntax ((rcode (rp:cdr p)))
		      (syntax (rp:export-procedure narg
				(lambda (argp)
				  (rp:external-arguments rcode
				    (rp:apply (lambda plist body ...) (rp:load-external-data argp 0 'aspec)))))))))
		 ((rp:eq? rtype 'effect)
		  (syntax (rp:export-procedure narg
			    (let ((v (rp:external-arguments 5 #f)))
			      (lambda (argp)
				(rp:apply (lambda plist body ...) (rp:load-external-data argp 0 'aspec))
				v)))))
		 (else (syntax-error rtype "unknown callback return value type")))))))))

(define-syntax rp:define-buffer-structure
  (lambda (x)
    (define (add-padding fragment elements)
      (syntax-case elements ()
	(() (if (rp:eqv? fragment 0) (syntax ()) (syntax ((rp:align 4)))))
	(((n t . arg) . rest)
	 (let ((make-align (lambda (need-align next-frag)
			     (with-syntax ((al need-align) (elt (syntax (n t . arg)))
					   ((elts ...) (add-padding next-frag (syntax rest))))
			       (if need-align (syntax ((rp:align al) elt elts ...)) (syntax (elt elts ...)))))))
	   (case (syntax-object->datum (syntax t))
	     ((integer cardinal string buffer procedure float)
	      (make-align (if (rp:eqv? fragment 0) #f 4) 0))
	     ((short-integer short-cardinal)
	      (make-align (if (rp:memv fragment '(0 2)) #f 2)
			  (rp:cdr (rp:assq fragment '((#f . #f) (0 . 2) (1 . 0) (2 . 0) (3 . 2))))))
	     ((byte-array)
	      (make-align #f #f))
	     ((array structure)
	      (make-align (if (rp:eqv? fragment 0) #f 4) #f))
	     (else (syntax-error (syntax t) "unknown structure element type")))))))
    (syntax-case x ()
      ((_ struct element ...)
       (with-syntax (((elts ...) (add-padding 0 (syntax (element ...)))))
	 (syntax (rp:define-packed-buffer-structure struct elts ...)))))))

(define-syntax rp:define-packed-buffer-structure
  (lambda (x)
    (define (compose-name orig-id . name-parts)
      (implicit-identifier orig-id
	(rp:string->symbol
	  (rp:apply rp:string-append
	    (rp:map (lambda (e) (if (identifier? e) (rp:symbol->string (syntax-object->datum e)) e)) name-parts)))))
    (define (parse-structure wcx wcc ne descs)
      (define (desc-error tcode darg)
	(with-syntax ((t tcode) (darg darg))
	  (syntax-error (syntax (t . darg)) "illegal buffer structure element")))
      (define (check-scalar tcode darg)
	(syntax-case darg ()
	  (() (rp:void))
	  ((defv) (rp:void))
	  (_ (desc-error tcode darg))))
      (define (parse-array-elt tcode darg next)
	(define (parse-scalar size)
	  (check-scalar tcode darg)
	  (next size #f tcode))
	(case tcode
	  ((integer cardinal string buffer procedure)
	   (parse-scalar 4))
	  ((float)
	   (parse-scalar 8))
	  ((short-integer short-cardinal)
	   (parse-scalar 2))
	  ((byte-array)
	   (let ((len (syntax-object->datum (syntax-case darg ()
					      ((size) (syntax size))
					      ((size defv) (syntax size))
					      (_ (desc-error tcode darg))))))
	     (next len #f (rp:list tcode len))))
	  ((array)
	   (with-syntax (((size (et . ea)) (syntax-case darg ()
					     ((size desc) (syntax (size desc)))
					     ((size index desc) (syntax (size desc)))
					     (_ (desc-error tcode darg)))))
	     (let ((len (syntax-object->datum (syntax size))))
	       (parse-array-elt (syntax-object->datum (syntax et)) (syntax ea)
		 (lambda (esize size-unknown? edesc)
		   (next (if size-unknown?
			   (with-syntax ((esize esize)) (syntax (rp:* size esize)))
			   (rp:* len esize))
			 size-unknown? (rp:list tcode len esize edesc)))))))
	  ((structure)
	   (with-syntax (((ssetv ssize)
			  (syntax-case darg ()
			    ((sname . param)
			     (rp:list (compose-name (syntax sname) (syntax sname) "-set-values")
				      (compose-name (syntax sname) (syntax sname) "-size")))
			    (_ (desc-error tcode darg)))))
	     (next (syntax (ssize)) #t (rp:list tcode (syntax ssetv)))))
	  (else (desc-error tcode darg))))
      (define (parse-structure-elt wcx wcc tcode darg next)
	(define (parse-scalar size)
	  (check-scalar tcode darg)
	  (next wcx (rp:+ wcc size) tcode))
	(case tcode
	  ((integer cardinal string buffer procedure)
	   (parse-scalar 4))
	  ((float)
	   (parse-scalar 8))
	  ((short-integer short-cardinal)
	   (parse-scalar 2))
	  ((byte-array)
	   (let ((len (syntax-object->datum (syntax-case darg ()
					      ((size) (syntax size))
					      ((size defv) (syntax size))
					      (_ (desc-error tcode darg))))))
	     (next wcx (rp:+ wcc len) (rp:list tcode len))))
	  ((array)
	   (with-syntax (((size (et . ea)) (syntax-case darg ()
					     ((size desc) (syntax (size desc)))
					     ((size index desc) (syntax (size desc)))
					     (_ (desc-error tcode darg)))))
	     (let ((len (syntax-object->datum (syntax size))))
	       (parse-array-elt (syntax-object->datum (syntax et)) (syntax ea)
		 (lambda (esize size-unknown? edesc)
		   (let ((elt (rp:list tcode len esize edesc)))
		     (if size-unknown?
		       (with-syntax ((esize esize) ((wcxe ...) wcx))
			 (next (syntax (wcxe ... (rp:* esize size))) wcc elt))
		       (next wcx (rp:+ wcc (rp:* esize len)) elt))))))))
	  ((structure)
	   (with-syntax (((ssetv ssize)
			  (syntax-case darg ()
			    ((sname . param)
			     (rp:list (compose-name (syntax sname) (syntax sname) "-set-values")
				      (compose-name (syntax sname) (syntax sname) "-size")))
			    (_ (desc-error tcode darg))))
			 ((wcxe ...) wcx))
	     (next (syntax (wcxe ... (ssize))) wcc (rp:list tcode (syntax ssetv)))))
	  (else (desc-error tcode darg))))
      (with-syntax (((wcxe ...) wcx) (swcc wcc) (nelts ne))
	(syntax-case descs (rp:align)
	  (() (syntax ((rp:+ swcc wcxe ...) nelts () () ())))
	  (((rp:align n) . rest)
	   (syntax-case wcx ()
	     (() (let ((n (syntax-object->datum (syntax n))))
		   (parse-structure wcx (rp:* n (rp:quotient (rp:+ wcc n -1) n)) ne (syntax rest))))
	     (_ (parse-structure (syntax ((rp:* n (rp:quotient (rp:+ swcc wcxe ... n -1) n)))) 0 ne (syntax rest)))))
	  (((element t . arg) . rest)
	   (parse-structure-elt wcx wcc (syntax-object->datum (syntax t)) (syntax arg)
	     (lambda (wcx wcc elt)
	       (with-syntax ((elt elt)
			     ((totsz nelts (en ...) (off ...) (type ...))
			      (parse-structure wcx wcc (rp:+ ne 1) (syntax rest))))
		 (syntax (totsz nelts (element en ...) ((rp:+ swcc wcxe ...) off ...) (elt type ...))))))))))
    (define (initvals elements)
      (define (valdesc tcode datum)
	(case tcode
	  ((integer cardinal float string buffer procedure short-integer short-cardinal)
	   (syntax-case datum ()
	     (() #f)
	     ((defv) (syntax (defv)))))
	  ((byte-array)
	   (syntax-case datum ()
	     ((len) #f)
	     ((len defv) (syntax (defv)))))
	  ((array)
	   (syntax-case datum ()
	     ((len (t . dat))
	      (cond ((valdesc (syntax-object->datum (syntax t)) (syntax dat)) =>
		     (lambda (vd) (with-syntax ((vald vd)) (syntax (vald)))))
		    (else #f)))
	     ((len k (t . dat))
	      (cond ((valdesc (syntax-object->datum (syntax t)) (syntax dat)) =>
		     (lambda (vd) (with-syntax ((vald vd)) (syntax (k vald)))))
		    (else #f)))))
	  ((structure)
	   (syntax-case datum ()
	     ((s-name) #f)
	     ((s-name sp ...) (syntax (sp ...)))))))
      (define (initval en tcode datum rr)
	(cond ((valdesc tcode datum) =>
	       (lambda (vd) (with-syntax ((element en) (vald vd) (rest rr)) (syntax ((element . vald) . rest)))))
	      (else rr)))
      (syntax-case elements (rp:align)
	(() (syntax ()))
	(((rp:align n) . rest) (initvals (syntax rest)))
	(((element t . dat) . rest)
	 (initval (syntax element) (syntax-object->datum (syntax t)) (syntax dat) (initvals (syntax rest))))))
    (define (make-access-ops name)
      (lambda (element offset type)
	(define (offexp esizes)
	  (if (rp:null? esizes)
	    (syntax (o))
	    (with-syntax (((index ...) (generate-temporaries esizes))
			  ((es ...) (generate-temporaries esizes))
			  ((esize ...) (rp:reverse esizes)))
	      (syntax ((rp:+ o (rp:* index es) ...) (index es esize) ...)))))
	(define (mk-scalar-ops esizes store load)
	  (with-syntax ((offset offset) ((oe (iv svar sval) ...) (offexp esizes))
			(storeval (compose-name name name "-store-" element))
			(loadval (compose-name name name "-load-" element)))
	    (with-syntax ((scode (store (syntax s) (syntax oe) (syntax val)))
			  (lcode (load (syntax s) (syntax oe))))
	      (syntax (begin (define-syntax storeval
			       (let ((o offset) (svar sval) ...)
				 (lambda (x)
				   (syntax-case x ()
				     ((_ s iv ... val)
				      (with-syntax ((o o) (svar svar) ...) (syntax scode)))))))
			     (define-syntax loadval
			       (let ((o offset) (svar sval) ...)
				 (lambda (x)
				   (syntax-case x ()
				     ((_ s iv ...)
				      (with-syntax ((o o) (svar svar) ...) (syntax lcode))))))))))))
	(define (mkops esizes type t)
	  (cond ((rp:assq t '((integer . 0) (cardinal . 1) (buffer . 5) (procedure . 6))) =>
		 (lambda (p)
		   (with-syntax ((tcode (rp:cdr p)))
		     (mk-scalar-ops esizes
		       (lambda (s oe val)
			 (with-syntax ((s s) (oe oe) (val val))
			   (syntax (rp:store-external-data s oe (rp:external-arguments tcode val)))))
		       (lambda (s oe)
			 (with-syntax ((s s) (oe oe))
			   (syntax (rp:car (rp:load-external-data s oe '(tcode))))))))))
		((rp:eq? t 'float)
		 (mk-scalar-ops esizes
		   (lambda (s oe val)
		     (with-syntax ((s s) (oe oe) (val val))
		       (syntax (rp:store-external-data s oe (rp:external-arguments 2 (rp:void) 3 val)))))
		   (lambda (s oe)
		     (with-syntax ((s s) (oe oe))
		       (syntax (rp:car (rp:load-external-data s oe '(2))))))))
		((rp:eq? t 'string)
		 (mk-scalar-ops esizes
		   (lambda (s oe val)
		     (with-syntax ((s s) (oe oe) (val val))
		       (syntax (rp:store-external-data s oe (rp:external-arguments 4 val)))))
		   (lambda (s oe)
		     (with-syntax ((s s) (oe oe))
		       (syntax (rp:car (rp:load-external-data s oe '(5))))))))
		((rp:assq t '((short-integer . #t) (short-cardinal . #f))) =>
		 (lambda (p)
		   (with-syntax ((sig (rp:cdr p)))
		     (mk-scalar-ops esizes
		       (lambda (s oe val)
			 (with-syntax ((s s) (oe oe) (val val))
			   (syntax (rp:store-external-halfword s oe sig val))))
		       (lambda (s oe)
			 (with-syntax ((s s) (oe oe))
			   (syntax (rp:load-external-halfword s oe sig))))))))
		((rp:memq (rp:car t) '(byte-array structure))
		 (with-syntax ((offset offset) ((oe (iv svar sval) ...) (offexp esizes))
			       (getval (compose-name name name "-get-" element)))
		   (syntax (define-syntax getval
			     (let ((o offset) (svar sval) ...)
			       (lambda (x)
				 (syntax-case x ()
				   ((_ s iv ...)
				    (with-syntax ((o o) (svar svar) ...)
				      (syntax (rp:skip-buffer-element s oe)))))))))))
		((rp:eq? (rp:car t) 'array)
		 (with-syntax (((_ n esize etype) type))
		   (mkops (rp:cons (syntax esize) esizes) (syntax etype) (syntax-object->datum (syntax etype)))))))
	(mkops '() type (syntax-object->datum type))))
    (define (make-type-syntax type)
      (syntax-case type ()
	((arr n es ed)
	 (with-syntax ((sed (make-type-syntax (syntax ed))))
	   (syntax (rp:list 'arr 'n es sed))))
	(t (syntax 't))))
    (syntax-case x ()
      ((_ (name param ...) eltdesc ...)
       (with-syntax (($... (syntax (... ...)))
		     ((totsz nelts (element ...) (offset ...) (type ...))
		      (parse-structure (syntax ()) 0 0 (syntax (eltdesc ...))))
		     ((inits ...) (initvals (syntax (eltdesc ...))))
		     (initialize (compose-name (syntax name) "rp:struct[" (syntax name) "]-init"))
		     (allocate (compose-name (syntax name) (syntax name) "-allocate"))
		     (create (compose-name (syntax name) (syntax name) "-create"))
		     (crarray (compose-name (syntax name) (syntax name) "-create-array"))
		     (sizeof (compose-name (syntax name) (syntax name) "-size"))
		     (getnth (compose-name (syntax name) (syntax name) "-array-ref"))
		     (setvals (compose-name (syntax name) (syntax name) "-set-values"))
		     (getvals (compose-name (syntax name) (syntax name) "-let-values"))
		     (offsetof (compose-name (syntax name) (syntax name) "-offsets"))
		     ((tmpp ...) (generate-temporaries (syntax (param ...)))))
	 (with-syntax (((access-ops ...)
			(rp:map (make-access-ops (syntax name))
				(syntax (element ...)) (syntax (offset ...)) (syntax (type ...))))
		       ((stype ...) (rp:map make-type-syntax (syntax (type ...)))))
	   (syntax (begin (define-syntax initialize
			    (lambda (x)
			      (syntax-case x ()
				((_ s tmpp ... (ename evalue) $...)
				 (syntax (let ((param tmpp) ...) (setvals s inits ... (ename evalue) $...)))))))
			  (define-syntax allocate
			    (let ((nbytes totsz))
			      (lambda (x)
				(syntax-case x ()
				  ((_ n)
				   (with-syntax ((nbytes nbytes))
				     (syntax (rp:make-external-buffer (rp:quotient (rp:+ (rp:* n nbytes) 3) 4)))))))))
			  (define-syntax create
			    (let ((nwords (rp:quotient (rp:+ totsz 3) 4)))
			      (lambda (x)
				(syntax-case x ()
				  ((_ tmpp ... (ename evalue) $...)
				   (with-syntax ((nwords nwords))
				     (syntax (let ((s (rp:make-external-buffer nwords)))
					       (initialize s tmpp ... (ename evalue) $...)
					       s))))))))
			  (define-syntax crarray
			    (lambda (x)
			      (syntax-case x ()
				((_ params $...)
				 (with-syntax ((n (rp:length (syntax (params $...))))
					       ((i $...)
						(let l ((k 0) (pp (syntax (params $...))))
						  (if (rp:null? pp) '() (rp:cons k (l (rp:+ k 1) (rp:cdr pp)))))))
				   (syntax (let ((s (allocate n)))
					     (initialize (getnth s i) . params) $...
					     (rp:cons s n))))))))
			  (define-syntax sizeof
			    (let ((nbytes totsz)) (lambda (x) (syntax-case x () ((_) nbytes)))))
			  (define-syntax getnth
			    (let ((nbytes totsz))
			      (lambda (x)
				(syntax-case x ()
				  ((_ s i)
				   (with-syntax ((nbytes nbytes))
				     (syntax (rp:skip-buffer-element s (rp:* i nbytes)))))))))
			  (define-syntax setvals
			    (rp:make-struct-setvals (syntax initialize) nelts
						    '#(element ...) (rp:vector offset ...) (rp:vector stype ...)))
			  (define-syntax getvals
			    (rp:make-struct-getvals nelts
						    '#(element ...) (rp:vector offset ...) (rp:vector stype ...)))
			  (rp:declare-constants offsetof (element offset) ...)
			  access-ops ...)))))
      ((_ name elm ...) (syntax (_ (name) elm ...))))))

(define-syntax rp:declare-constants
  (lambda (x)
    (syntax-case x ()
      ((_ name (idsym value) ...)
       (syntax (define-syntax name (rp:convert-constant `((idsym ,value) ...))))))))

(define-syntax rp:declare-flag-set
  (lambda (x)
    (syntax-case x ()
      ((_ name (idsym value) ...)
       (with-syntax (($... (syntax (... ...))))
	 (syntax (define-syntax name
		   (let ((fvalue (rp:convert-constant `((idsym ,value) ...))))
		     (lambda (x)
		       (syntax-case x ()
			 ((nm flag $...) (rp:apply rp:bitwise-or (rp:map fvalue (syntax ((nm flag) $...)))))))))))))))
