;;;; @(#)$Id: rhizo.init,v 1.1 1999/02/15 08:47:40 qfwfq Exp $
; $Log: rhizo.init,v $
; Revision 1.1  1999/02/15 08:47:40  qfwfq
; r5rs -- multiple values, dynamic-wind and eval
;

;;; This file is derived from Template.scm of slib2c5.
;;; NOT all programs in slib is tested with rhizome/pi. Good luck.

;;; (software-type) should be set to the generic operating system type.
;;; UNIX, VMS, MACOS, AMIGA and MS-DOS are supported.

(define software-type
  (let ((os (car (rp:identify-platform))))
    (case os
      ((windows) (set! os 'ms-dos))
      ((cygwin) (set! os 'unix)))	; from the aspect of pathname convention
    (lambda () os)))

;;; (scheme-implementation-type) should return the name of the scheme
;;; implementation loading this file.

(define (scheme-implementation-type) 'rhizome/pi)

;;; (scheme-implementation-version) should return a string describing
;;; the version the scheme implementation loading this file.

(define (scheme-implementation-version) "0.50")

;;; (implementation-vicinity) should be defined to be the pathname of
;;; the directory where any auxillary files to your Scheme
;;; implementation reside.

(define implementation-vicinity
  (let ((path (getenv "RHIZOME_LIB")))
    (if (not path)
      (set! path
	(case (software-type)
	  ((UNIX) "/usr/local/lib/rhizome")
	  ((MS-DOS) "C:\\RHIZOME"))))
    (set! path
      (string-append path
	(case (software-type)
	  ((UNIX) "/")
	  ((MS-DOS) "\\"))))
    (lambda () path)))

;;; (library-vicinity) should be defined to be the pathname of the
;;; directory where files of Scheme library functions reside.

(define library-vicinity
  (let ((library-path
	 (or (getenv "SCHEME_LIBRARY_PATH")
	     (case (software-type)
	       ((UNIX) "/usr/local/lib/slib/")
	       ((MS-DOS) "C:\\SLIB\\")))))
    (lambda () library-path)))

;;; (home-vicinity) should return the vicinity of the user's HOME
;;; directory, the directory which typically contains files which
;;; customize a computer environment for a user.

(define home-vicinity
  (let ((home-path (getenv "HOME")))
    (if home-path			; this seems to be necessary for me
      (set! home-path
	(string-append home-path
	  (case (software-type)
	    ((UNIX) "/")
	    ((MS-DOS) "\\")))))
    (lambda () home-path)))

;;; *FEATURES* should be set to a list of symbols describing features
;;; of this implementation.  Suggestions for features are:

(define *features*
      '(
	source
	compiled
	rev4-report
	ieee-p1178
	rev4-optional-procedures
	multiarg/and-
	multiarg-apply
	rationalize
	delay
	with-file
	string-port
	transcript
	char-ready?
	macro
	eval
	values
	dynamic-wind
	ieee-floating-point
	full-continuation
	trace
	system
	getenv
	program-arguments
	))

;;; (OUTPUT-PORT-WIDTH <port>)
(define (output-port-width . arg) 79)

;;; (OUTPUT-PORT-HEIGHT <port>)
(define (output-port-height . arg) 24)

;;; (CURRENT-ERROR-PORT)
(define current-error-port rp:current-error-port)

;;; (TMPNAM) makes a temporary file name.
(define tmpnam
  (let ((cntr 100))
    (lambda () (set! cntr (+ 1 cntr))
	       (let ((tmp (string-append "slib_" (number->string cntr))))
		 (if (file-exists? tmp) (tmpnam) tmp)))))

;;; (FILE-EXISTS? <string>)
; builtin

;;; (DELETE-FILE <string>)
(define delete-file
  (case (software-type)
    ((UNIX) (lambda (f) (zero? (system (string-append "rm " f)))))
    ((MS-DOS) (lambda (f) (zero? (system (string-append "del " f)))))))

;;; FORCE-OUTPUT flushes any pending output on optional arg output port
;;; use this definition if your system doesn't have such a procedure.
(define (force-output . arg) #t)

;;; CALL-WITH-INPUT-STRING and CALL-WITH-OUTPUT-STRING are the string
;;; port versions of CALL-WITH-*PUT-FILE.
(define (call-with-input-string s f)
  (let ((p (rp:open-input-string s)))
    (rp:call-with-values (lambda () (f p))
      (lambda vals (rp:close-input-port p)
		   (rp:apply rp:values vals)))))

(define (call-with-output-string f)
  (let ((p (rp:open-output-string)))
    (f p)
    (let ((s (rp:get-output-string p))) (rp:close-output-port p) s)))

;;; CHAR-CODE-LIMIT is one greater than the largest integer which can
;;; be returned by CHAR->INTEGER.
(define char-code-limit 256)

;;; MOST-POSITIVE-FIXNUM is used in modular.scm
(define most-positive-fixnum #x1FFFFFFF)

;;; Return argument
(define identity rp:identity)	; did'nt you know?

;;; SLIB:EVAL is single argument eval using the top-level (user) environment.
(define slib:eval eval)

;;; If your implementation provides R4RS macros:
(define macro:eval slib:eval)
(define macro:load load)

(define *defmacros*
  (list (cons 'defmacro
	      (lambda (name parms . body)
		`(set! *defmacros* (cons (cons ',name (lambda ,parms ,@body))
					 *defmacros*))))))
(define (defmacro? m) (and (assq m *defmacros*) #t))

(define (macroexpand-1 e)
  (if (pair? e) (let ((a (car e)))
		  (cond ((symbol? a) (set! a (assq a *defmacros*))
				     (if a (apply (cdr a) (cdr e)) e))
			(else e)))
      e))

(define (macroexpand e)
  (if (pair? e) (let ((a (car e)))
		  (cond ((symbol? a)
			 (set! a (assq a *defmacros*))
			 (if a (macroexpand (apply (cdr a) (cdr e))) e))
			(else e)))
      e))

(define gentemp
  (let ((*gensym-counter* -1))
    (lambda ()
      (set! *gensym-counter* (+ *gensym-counter* 1))
      (string->symbol
       (string-append "slib:G" (number->string *gensym-counter*))))))

(define base:eval slib:eval)
(define (defmacro:eval x) (base:eval (defmacro:expand* x)))
(define (defmacro:expand* x)
  (require 'defmacroexpand) (apply defmacro:expand* x '()))

(define (slib:eval-load <pathname> evl)
  (if (not (file-exists? <pathname>))
      (set! <pathname> (string-append <pathname> (scheme-file-suffix))))
  (call-with-input-file <pathname>
    (lambda (port)
      (let ((old-load-pathname *load-pathname*))
	(set! *load-pathname* <pathname>)
	(do ((o (read port) (read port)))
	    ((eof-object? o))
	  (evl o))
	(set! *load-pathname* old-load-pathname)))))

(define (defmacro:load <pathname>)
  (slib:eval-load <pathname> defmacro:eval))

(define slib:warn
  (lambda args
    (let ((port (current-error-port)))
      (display "Warn:" port)
      (for-each (lambda (x) (display " " port) (display x port)) args))))

;;; define an error procedure for the library
(define (slib:error . args)
  ((rp:exception (slib-error args)
     (lambda (p)
       (display "Error from slib function:" p)
       (for-each (lambda (x) (display " " p) (display x p)) args)))
   args))

;;; define these as appropriate for your system.
(define slib:tab (integer->char 9))
(define slib:form-feed (integer->char 12))

;;; Support for older versions of Scheme.  Not enough code for its own file.
(define (last-pair l) (if (pair? (cdr l)) (last-pair (cdr l)) l))
(define t #t)
(define nil #f)

;;; Define these if your implementation's syntax can support it and if
;;; they are not already defined.

;(define (1+ n) (+ n 1))
;(define (-1+ n) (+ n -1))
;(define 1- -1+)

(define in-vicinity string-append)

;;; Is (PROGRAM-ARGUMENTS) more convenient if the result is mutable?
(define program-arguments
  (let ((argv (map string-copy *invocation-arg*)))
    (lambda () (map string-copy argv))))

;;; Define SLIB:EXIT to be the implementation procedure to exit or
;;; return if exitting not supported.
(define (slib:exit . args)
  (cond ((null? args) (exit))
	((eq? (car args) #t) (exit))
	((and (number? (car args)) (exact? (car args)) (integer? (car args)))
	 (exit (car args)))
	(else (exit 1))))

;;; Here for backward compatability
(define (scheme-file-suffix) ".scm")

;;; (SLIB:LOAD-SOURCE "foo") should load "foo.scm" or with whatever
;;; suffix all the module files in SLIB have.  See feature 'SOURCE.

(define (slib:load-source f) (load (string-append f ".scm")))

;;; (SLIB:LOAD-COMPILED "foo") should load the file that was produced
;;; by compiling "foo.scm" if this implementation can compile files.
;;; See feature 'COMPILED.

(define slib:load-compiled rp:load-compiled-module)

;;; At this point SLIB:LOAD must be able to load SLIB files.

(define slib:load slib:load-source)

(slib:load (in-vicinity (library-vicinity) "require"))
