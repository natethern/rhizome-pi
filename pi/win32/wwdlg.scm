; Copyright (c) 1998-99 Inujima, Masaru <qfwfq@kt.rim.or.jp>
;
; Permission to use, copy, modify, and distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

;;;; @(#)$Id: wwdlg.scm,v 1.4 2004/08/06 05:48:06 qfwfq Exp $
; $Log: wwdlg.scm,v $
; Revision 1.4  2004/08/06 05:48:06  qfwfq
; change license, using OpenBSD:/usr/share/misc/license.template
;
; Revision 1.3  1999/06/15 07:24:24  qfwfq
; Add packed buffer
;
; Revision 1.2  1999/02/15 08:16:06  qfwfq
; rp:ww-document change interface
;
; Revision 1.1  1998/07/31 11:34:35  qfwfq
; First release of ww library
;

(rp:use-macro-package "w_base.scm")
(rp:use-macro-package "w_dlg_fl.scm")
(rp:use-macro-package "w_dlg_pr.scm")
(rp:use-macro-package "w_dlg_ps.scm")
(rp:use-macro-package "w_wstyle.scm")
(rp:use-macro-package "w_c_btn.scm")
(rp:use-macro-package "w_msg.scm")
(rp:use-macro-package "w_dc.scm")
(rp:use-macro-package "w_file.scm")

(rp:define-generic (rp:ww-comdlg-file-destroy this))
(rp:define-generic (rp:ww-comdlg-file-get-open this owner . opts))
(rp:define-generic (rp:ww-comdlg-file-get-save this owner . opts))
(rp:define-generic (rp:ww-comdlg-file-filter-index this))
(rp:define-generic (rp:ww-comdlg-file-file-title this))
(rp:define-generic (rp:ww-comdlg-file-path-offsets this))
(rp:define-generic (rp:ww-comdlg-file-extension-different? this))
(rp:define-generic (rp:ww-comdlg-file-readonly? this))

(define rp:ww-comdlg-file-create
  (let ((optlist `((readonly . ,(win:ofn readonly)) (overwrite-prompt . ,(win:ofn overwriteprompt))
		   (hide-readonly . ,(win:ofn hidereadonly)) (no-change-dir . ,(win:ofn nochangedir))
		   (show-help . ,(win:ofn showhelp)) (no-validate . ,(win:ofn novalidate))
		   (path-must-exist . ,(win:ofn pathmustexist)) (file-must-exist . ,(win:ofn filemustexist))
		   (create-prompt . ,(win:ofn createprompt)) (share-aware . ,(win:ofn shareaware))
		   (no-readonly-return . ,(win:ofn noreadonlyreturn))
		   (no-test-file-create . ,(win:ofn notestfilecreate))
		   (no-network-button . ,(win:ofn nonetworkbutton)) (no-longnames . ,(win:ofn nolongnames))
		   (no-dereference-links . ,(win:ofn nodereferencelinks)) (longnames . ,(win:ofn longnames))
		   (enable-include-notify . ,(win:ofn enableincludenotify))
		   (enable-sizing . ,(win:ofn enablesizing)))))
    (rp:lambda-with-options ()
      ((template-in-memory #f) (template-module #f) (dialog-template #f) (filters #f) (custom-filter-title #f)
       (filter-index 1) (initial-file "") (max-file 260) (max-file-title 0) (directory #f) (dialog-title #f)
       (default-suffix #f) (cust-data 0) (hook-procedure #f) (options '()))
      (let ((instance #f) (filter #f) (custom-filter #f) (max-cust-filter 0) (file #f) (file-title #f)
	    (initial-dir #f) (title #f) (def-ext #f) (hook #f) (template-name #f) (template-string #f)
	    (multi #f) (explorer #f) (flags 0))
	(define (add-flag-f f) (set! flags (rp:bitwise-or flags f)))
	(define-syntax add-flag (lambda (x) (syntax-case x () ((_ f) (syntax (add-flag-f (win:ofn f)))))))
	(if template-in-memory (begin (set! instance template-in-memory)
				      (add-flag enabletemplatehandle)))
	(if dialog-template
	  (if (rp:string? dialog-template) (begin (set! template-name (rp:export-string dialog-template))
						  (set! template-string #t))
					   (set! template-name (rp:cast-integer->buffer template-name))))
	(if (and template-module template-name) (begin (set! instance template-module)
						       (add-flag enabletemplate)))
	(if filters
	  (let ((desc-lengths (rp:map (lambda (p) (rp:+ (rp:string-length (rp:car p)) 1)) filters))
		(pattern-lengths (rp:map (lambda (p) (rp:+ (rp:string-length (rp:car (rp:cdr p))) 1)) filters)))
	    (set! filter (rp:make-external-buffer
			   (rp:quotient (rp:+ (rp:apply rp:+ desc-lengths) (rp:apply rp:+ pattern-lengths) 4) 4)))
	    (do ((filters filters (rp:cdr filters))
		 (desc-lengths desc-lengths (rp:cdr desc-lengths))
		 (pattern-lengths pattern-lengths (rp:cdr pattern-lengths))
		 (offset 0 (rp:+ offset (rp:car desc-lengths) (rp:car pattern-lengths))))
	      ((rp:null? filters) (rp:store-external-chars filter offset "" #f))
	      (rp:store-external-chars filter offset (rp:car (rp:car filters)) #f)
	      (rp:store-external-chars filter
		(rp:+ offset (rp:car desc-lengths)) (rp:car (rp:cdr (rp:car filters))) #f))))
	(if custom-filter-title
	  (let ((nwords (rp:quotient (rp:+ (rp:string-length custom-filter-title) 84) 4)))
	    (set! custom-filter (rp:make-external-buffer nwords))
	    (rp:store-external-chars custom-filter 0 custom-filter-title (rp:* nwords 4))
	    (set! max-cust-filter (rp:* nwords 4))))
	(set! file (rp:make-external-buffer (rp:quotient (rp:+ max-file 3) 4)))
	(rp:store-external-chars file 0 initial-file #f)
	(if (rp:not (rp:zero? max-file-title))
	  (begin
	    (set! file-title (rp:make-external-buffer (rp:quotient (rp:+ max-file-title 3) 4)))
	    (rp:store-external-chars file-title 0 "" #f)))
	(if directory (set! initial-dir (rp:export-string directory)))
	(if dialog-title (set! title (rp:export-string dialog-title)))
	(if default-suffix (set! def-ext (rp:export-string default-suffix)))
	(if hook-procedure (begin (set! hook (rp:make-entry cardinal
					       ((wnd buffer) (message cardinal) (wparam cardinal) (lparam integer))
					       (hook-procedure wnd message wparam lparam)))
				  (add-flag enablehook)))
	(rp:for-each
	  (lambda (opt)
	    (cond ((rp:assq opt optlist) => (lambda (p) (add-flag-f (rp:cdr p))))
		  ((rp:eq? opt 'allow-multiselect) (add-flag allowmultiselect) (set! multi #t))
		  ((rp:eq? opt 'explorer) (add-flag explorer) (set! explorer #t))))
	  options)
	(let ((buf (win:openfilename-create (instance instance) (filter filter) (custom-filter custom-filter)
					    (max-cust-filter max-cust-filter) (filter-index filter-index)
					    (file file) (max-file max-file)
					    (file-title file-title) (max-file-title max-file-title)
					    (initial-dir initial-dir) (title title) (flags flags) (def-ext def-ext)
					    (cust-data cust-data) (hook hook) (template-name template-name))))
	  (define invoke-dialog
	    (rp:lambda-with-options (proc owner)
	      ((filter-index #f) (initial-file #f) (directory '()) (dialog-title '()) (default-suffix '())
	       (cust-data #f) (readonly '()))
	      (win:openfilename-store-owner buf owner)
	      (if filter-index (win:openfilename-store-filter-index buf filter-index))
	      (if initial-file (rp:store-external-chars (win:openfilename-load-file buf) 0 initial-file #f))
	      (if (rp:not (rp:eq? directory '()))
		(let ((o-dir (win:openfilename-load-initial-dir buf)))
		  (if o-dir (rp:destroy-external-buffer o-dir))
		  (win:openfilename-store-initial-dir buf (if directory (rp:export-string directory) #f))))
	      (if (rp:not (rp:eq? dialog-title '()))
		(let ((o-title (win:openfilename-load-title buf)))
		  (if o-title (rp:destroy-external-buffer o-title))
		  (win:openfilename-store-title buf (if dialog-title (rp:export-string dialog-title) #f))))
	      (if (rp:not (rp:eq? default-suffix '()))
		(let ((o-ext (win:openfilename-load-def-ext buf)))
		  (if o-ext (rp:destroy-external-buffer o-ext))
		  (win:openfilename-store-def-ext buf (if default-suffix (rp:export-string default-suffix) #f))))
	      (if cust-data (win:openfilename-store-cust-data buf cust-data))
	      (if (rp:not (rp:eq? readonly '()))
		(win:openfilename-store-flags buf
		  (rp:bitwise-or (rp:bitwise-and (win:openfilename-load-flags buf)
						 (rp:bitwise-invert (win:ofn readonly)))
				 (if readonly (win:ofn readonly) 0))))
	      (if (rp:zero? (proc buf)) #f
		(if (and multi explorer)
		  (let getfile ((fbuf (win:openfilename-load-file buf)) (ptr 0))
		    (let ((str (rp:load-external-chars fbuf ptr #f)))
		      (if (rp:string=? str "") '()
			(rp:cons str (getfile fbuf (rp:+ ptr (rp:string-length str) 1))))))
		  (rp:load-external-chars (win:openfilename-load-file buf) 0 #f)))))
	  (rp:object-constructor ()
	    ((rp:ww-comdlg-file-destroy this)
	     (win:openfilename-let-values buf ((filter filter) (custom-filter custom-filter) (file file)
					       (file-title file-title) (initial-dir initial-dir) (title title)
					       (def-ext def-ext) (hook hook) (template-name template-name))
	       (rp:map (lambda (b) (if b (rp:destroy-external-buffer b)))
		       (rp:list filter custom-filter file file-title initial-dir title def-ext))
	       (if hook (rp:destroy-exported-procedure hook))
	       (if (and template-name template-string) (rp:destroy-external-buffer template-name)))
	     (rp:destroy-external-buffer buf))
	    ((rp:ww-comdlg-file-get-open this owner . opts)
	     (rp:apply invoke-dialog rp:win32api-get-open-file-name owner opts))
	    ((rp:ww-comdlg-file-get-save this owner . opts)
	     (rp:apply invoke-dialog rp:win32api-get-save-file-name owner opts))
	    ((rp:ww-comdlg-file-filter-index this)
	     (win:openfilename-load-filter-index buf))
	    ((rp:ww-comdlg-file-file-title this)
	     (rp:load-external-chars (win:openfilename-load-file-title buf) 0 #f))
	    ((rp:ww-comdlg-file-path-offsets this)
	     (let ((offset (win:openfilename-load-file-offset buf))
		   (extension (win:openfilename-load-file-extension buf)))
	       (rp:list offset extension)))
	    ((rp:ww-comdlg-file-extension-different? this)
	     (rp:not (rp:zero? (rp:bitwise-and (win:openfilename-load-flags buf) (win:ofn extensiondifferent)))))
	    ((rp:ww-comdlg-file-readonly? this)
	     (rp:not (rp:zero? (rp:bitwise-and (win:openfilename-load-flags buf) (win:ofn readonly)))))))))))

(rp:define-generic (rp:ww-document-destroy this))
(rp:define-generic (rp:ww-document-new this))
(rp:define-generic (rp:ww-document-load-from-file-by-name this proc file))
(rp:define-generic (rp:ww-document-load-from-file-by-handle this file))
(rp:define-generic (rp:ww-document-load-from-file-by-port this file))
(rp:define-generic (rp:ww-document-open-by-name this wnd proc . opts))
(rp:define-generic (rp:ww-document-open-by-handle this wnd . opts))
(rp:define-generic (rp:ww-document-open-by-port this wnd . opts))
(rp:define-generic (rp:ww-document-save-by-name this wnd proc . opts))
(rp:define-generic (rp:ww-document-save-by-handle this wnd . opts))
(rp:define-generic (rp:ww-document-save-by-port this wnd . opts))
(rp:define-generic (rp:ww-document-save-as-by-name this wnd proc . opts))
(rp:define-generic (rp:ww-document-save-as-by-handle this wnd . opts))
(rp:define-generic (rp:ww-document-save-as-by-port this wnd . opts))
(rp:define-generic (rp:ww-document-update-title this wnd))
(rp:define-generic (rp:ww-document-readonly? this))
(rp:define-generic (rp:ww-document-get-path this))
(rp:define-generic (rp:ww-document-get-title this . aux))
(rp:define-generic (rp:ww-document-load-from-handle this handle wnd filter-index extension-different?))
(rp:define-generic (rp:ww-document-load-from-port this port wnd filter-index extension-different?))
(rp:define-generic (rp:ww-document-save-to-handle this handle wnd filter-index extension-different?))
(rp:define-generic (rp:ww-document-save-to-port this port wnd filter-index extension-different?))
(rp:define-generic (rp:ww-document-make-title this))

(define rp:ww-document-create
  (rp:lambda-with-options ()
    ((dialog-option '()) (dialog-flags '(path-must-exist))
     (open-dialog-option '()) (open-dialog-flags '(file-must-exist))
     (save-dialog-option '()) (save-dialog-flags '(hide-readonly overwrite-prompt)))
    (let ((readonly #f) (current-file #f) (current-file-title #f)
	  (open-dialog (rp:apply rp:ww-comdlg-file-create
				 'max-file-title 256
				 'options (rp:append dialog-flags open-dialog-flags)
				 (rp:append dialog-option open-dialog-option)))
	  (save-as-dialog (rp:apply rp:ww-comdlg-file-create
				    'max-file-title 256
				    'options (rp:append dialog-flags save-dialog-flags)
				    (rp:append dialog-option save-dialog-option)))
	  (load-filename->handle
	    (lambda (this file wnd filter-index extension-different?)
	      (let ((fbuf (rp:export-string file)))
		(let ((handle (rp:win32api-create-file fbuf (win:generic read) (win:file-share read) #f
						       (win:open existing) (win:file-attribute normal) #f)))
		  (rp:destroy-external-buffer fbuf)
		  (if (rp:eqv? (rp:cast-buffer->integer handle) (win:invalid handle-value))
		    (rp:ww-windows-error)
		    (rp:locally () ((rp:win32api-close-handle handle))
		      (rp:ww-document-load-from-handle this handle wnd filter-index extension-different?)))))))
	  (load-filename->port
	    (lambda (this file wnd filter-index extension-different?)
	      (rp:locally ((port (rp:open-input-file file)))
			  ((rp:close-input-port port))
		(rp:ww-document-load-from-port this port wnd filter-index extension-different?))))
	  (save-filename->handle
	    (lambda (this file wnd filter-index extension-different?)
	      (let ((fbuf (rp:export-string file)))
		(let ((handle (rp:win32api-create-file fbuf (win:generic write) 0 #f
						       (win:create always) (win:file-attribute normal) #f)))
		  (rp:destroy-external-buffer fbuf)
		  (if (rp:eqv? (rp:cast-buffer->integer handle) (win:invalid handle-value))
		    (rp:ww-windows-error)
		    (rp:locally () ((rp:win32api-close-handle handle))
		      (rp:ww-document-save-to-handle this handle wnd filter-index extension-different?)))))))
	  (save-filename->port
	    (lambda (this file wnd filter-index extension-different?)
	      (rp:locally ((port (rp:open-output-file (rp:string-append ">" file))))
			  ((rp:close-output-port port))
		(rp:ww-document-save-to-port this port wnd filter-index extension-different?)))))
      (rp:object-constructor ()
	((rp:ww-document-destroy this)
	 (rp:ww-comdlg-file-destroy open-dialog)
	 (rp:ww-comdlg-file-destroy save-as-dialog))
	((rp:ww-document-new this)
	 (set! readonly #f)
	 (set! current-file #f)
	 (set! current-file-title #f))
	((rp:ww-document-load-from-file-by-name this proc file)
	 (proc this file #f #f '())
	 (set! readonly #f)
	 (set! current-file #f)
	 (set! current-file-title file))
	((rp:ww-document-load-from-file-by-handle this file)
	 (rp:ww-document-load-from-file-by-name this load-filename->handle file))
	((rp:ww-document-load-from-file-by-port this file)
	 (rp:ww-document-load-from-file-by-name this load-filename->port file))
	((rp:ww-document-open-by-name this wnd proc . opts)
	 (let ((file (rp:apply rp:ww-comdlg-file-get-open open-dialog wnd opts)))
	   (if file
	     (begin (proc this file wnd
		      (rp:ww-comdlg-file-filter-index open-dialog)
		      (rp:ww-comdlg-file-extension-different? open-dialog))
		    (set! readonly (rp:ww-comdlg-file-readonly? open-dialog))
		    (set! current-file file)
		    (set! current-file-title (rp:ww-comdlg-file-file-title open-dialog))
		    #t)
	     #f)))
	((rp:ww-document-open-by-handle this wnd . opts)
	 (rp:apply rp:ww-document-open-by-name this wnd load-filename->handle opts))
	((rp:ww-document-open-by-port this wnd . opts)
	 (rp:apply rp:ww-document-open-by-name this wnd load-filename->port opts))
	((rp:ww-document-save-by-name this wnd proc . opts)
	 (let ((file (and (rp:not readonly) (if current-file current-file current-file-title))))
	   (if file (begin (proc this file wnd #f '()) #t)
		    (rp:apply rp:ww-document-save-as-by-name this wnd proc opts))))
	((rp:ww-document-save-by-handle this wnd . opts)
	 (rp:apply rp:ww-document-save-by-name this wnd save-filename->handle opts))
	((rp:ww-document-save-by-port this wnd . opts)
	 (rp:apply rp:ww-document-save-by-name this wnd save-filename->port opts))
	((rp:ww-document-save-as-by-name this wnd proc . opts)
	 (let ((file (rp:apply rp:ww-comdlg-file-get-save save-as-dialog wnd opts)))
	   (if file
	     (begin (proc this file wnd
		      (rp:ww-comdlg-file-filter-index save-as-dialog)
		      (rp:ww-comdlg-file-extension-different? save-as-dialog))
		    (set! readonly #f)
		    (set! current-file file)
		    (set! current-file-title (rp:ww-comdlg-file-file-title save-as-dialog))
		    #t)
	     #f)))
	((rp:ww-document-save-as-by-handle this wnd . opts)
	 (rp:apply rp:ww-document-save-as-by-name this wnd save-filename->handle opts))
	((rp:ww-document-save-as-by-port this wnd . opts)
	 (rp:apply rp:ww-document-save-as-by-name this wnd save-filename->port opts))
	((rp:ww-document-update-title this wnd)
	 (let ((str (rp:export-string (rp:ww-document-make-title this))))
	   (rp:win32api-set-window-text wnd str)
	   (rp:destroy-external-buffer str)))
	((rp:ww-document-readonly? this) readonly)
	((rp:ww-document-get-path this) current-file)
	((rp:ww-document-get-title this . aux)
	 (if current-file-title current-file-title (if (rp:null? aux) #f (rp:car aux))))))))

(rp:define-generic (rp:ww-comdlg-page-destroy this))
(rp:define-generic (rp:ww-comdlg-page-invoke this owner . opts))
(rp:define-generic (rp:ww-comglg-page-paper-size this))
(rp:define-generic (rp:ww-comdlg-page-margin this))

(define rp:ww-comdlg-page-create
  (let ((optlist `((disable-margins . ,(win:psd disablemargins)) (disable-printer . ,(win:psd disableprinter))
		   (no-warning . ,(win:psd nowarning)) (disable-orientation . ,(win:psd disableorientation))
		   (desable-paper . ,(win:psd disablepaper)) (show-help . ,(win:psd showhelp))
		   (disable-page-painting ,(win:psd disablepagepainting))
		   (no-network-button . ,(win:psd nonetworkbutton)))))
    (rp:lambda-with-options ()
      ((measure #f) (min-margin #f) (margin #f) (options '())
       (template-in-memory #f) (template-module #f) (dialog-template #f)
       (cust-data 0) (hook-procedure #f) (page-paint-hook-procedure #f))
      (let ((invoked #f) (flags 0) (instance #f) (page-setup-hook #f) (page-paint-hook #f)
	    (page-setup-template-name #f) (page-setup-template #f) (template-string #f))
	(define (add-flag-f f) (set! flags (rp:bitwise-or flags f)))
	(define-syntax add-flag (lambda (x) (syntax-case x () ((_ f) (syntax (add-flag-f (win:psd f)))))))
	(cond ((rp:eq? measure 'in-0.01mm) (add-flag inhundredthsofmillimeters))
	      ((rp:eq? measure 'in-0.001in) (add-flag inthousandthsofinches)))
	(if min-margin (add-flag minmargins))
	(if margin (add-flag margins))
	(if dialog-template
	  (if (rp:string? dialog-template) (begin (set! page-setup-template-name (rp:export-string dialog-template))
						  (set! template-string #t))
					   (set! page-setup-template-name (rp:cast-integer->buffer dialog-template))))
	(if (and template-module dialog-template) (begin (set! instance template-module)
							 (add-flag enablepagesetuptemplate)))
	(if template-in-memory (begin (set! page-setup-template template-in-memory)
				      (add-flag enablepagesetuptemplatehandle)))
	(if hook-procedure (begin (set! page-setup-hook
				    (rp:make-entry cardinal
				      ((wnd buffer) (message cardinal) (wparam cardinal) (lparam integer))
				      (hook-procedure wnd message wparam lparam)))
				  (add-flag enablepagesetuphook)))
	(if page-paint-hook-procedure (begin (set! page-paint-hook
					       (rp:make-entry cardinal
						 ((wnd buffer) (message cardinal) (wparam cardinal) (lparam integer))
						 (page-paint-hook-procedure wnd message wparam lparam)))
					     (add-flag enablepagepainthook)))
	(rp:for-each (lambda (opt) (cond ((rp:assq opt optlist) => (lambda (p) (add-flag-f (rp:cdr p)))))) options)
	(let ((buf (win:pagesetupdlg-create (dev-mode #f) (dev-names #f) (flags flags)
					    (instance instance) (cust-data cust-data)
					    (page-setup-hook page-setup-hook) (page-paint-hook page-paint-hook)
					    (page-setup-template-name page-setup-template-name)
					    (page-setup-template page-setup-template))))
	  (define (set-rect rect l)
	    (rp:apply (lambda (left top right bottom)
			(win:rect-set-values rect (left left) (top top) (right right) (bottom bottom)))
		      l))
	  (define (turn-flag flag on?)
	    (win:pagesetupdlg-store-flags buf
	      (rp:bitwise-or (rp:bitwise-and (win:pagesetupdlg-load-flags buf) (rp:bitwise-invert flag))
			     (if on? flag 0))))
	  (define (flag-test? flags flag) (rp:not (rp:zero? (rp:bitwise-and flags flag))))
	  (define (get-measure)
	    (let ((flags (win:pagesetupdlg-load-flags buf)))
	      (cond ((flag-test? flags (win:psd inthousandthsofinches)) 'in-0.001in)
		    ((flag-test? flags (win:psd inhundredthsofmillimeters)) 'in-0.01mm)
		    (else #f))))
	  (if min-margin (set-rect (win:pagesetupdlg-get-min-margin buf) min-margin))
	  (if margin (set-rect (win:pagesetupdlg-get-margin buf) margin))
	  (rp:object-constructor ()
	    ((rp:ww-comdlg-page-destroy this)
	     (win:pagesetupdlg-let-values buf ((page-setup-hook page-setup-hook) (page-paint-hook page-paint-hook)
					       (page-setup-template-name page-setup-template-name))
	       (if page-setup-hook (rp:destroy-exported-procedure page-setup-hook))
	       (if page-paint-hook (rp:destroy-exported-procedure page-paint-hook))
	       (if (and page-setup-template-name template-string)
		 (rp:destroy-external-buffer page-setup-template-name)))
	     (rp:destroy-external-buffer buf))
	    ((rp:ww-comdlg-page-invoke this owner . opts)
	     (rp:apply
	       (rp:lambda-with-options (owner) ((return-default #f) (dev-mode '()) (dev-names '()) (cust-data #f))
		 (if return-default (begin (set! dev-mode #f) (set! dev-names #f)
					   (turn-flag (win:psd returndefault) #t)))
		 (win:pagesetupdlg-store-owner buf owner)
		 (if (rp:not (rp:eq? dev-mode '())) (win:pagesetupdlg-store-dev-mode buf dev-mode))
		 (if (rp:not (rp:eq? dev-names '())) (win:pagesetupdlg-store-dev-names buf dev-names))
		 (if cust-data (win:pagesetupdlg-store-cust-data buf cust-data))
		 (let ((res (rp:win32api-page-setup-dlg buf)))
		   (if return-default (turn-flag (win:psd returndefault) #f))
		   (if (rp:zero? res) #f
		     (begin (set! invoked #t)
			    (rp:list (win:pagesetupdlg-load-dev-mode buf) (win:pagesetupdlg-load-dev-names buf))))))
	       owner opts))
	    ((rp:ww-comglg-page-paper-size this)
	     (if invoked
	       (win:point-let-values (win:pagesetupdlg-get-paper-size buf)
		 ((x x) (y y))
		 (rp:list (get-measure) x y))
	       #f))
	    ((rp:ww-comdlg-page-margin this)
	     (if invoked
	       (win:rect-let-values (win:pagesetupdlg-get-margin buf)
		 ((left left) (top top) (right right) (bottom bottom))
		 (rp:list (get-measure) left top right bottom))
	       #f))))))))

(rp:define-generic (rp:ww-comdlg-print-destroy this))
(rp:define-generic (rp:ww-comdlg-print-invoke this owner . opts))
(rp:define-generic (rp:ww-comdlg-print-dc this))
(rp:define-generic (rp:ww-comdlg-print-page-range this))
(rp:define-generic (rp:ww-comdlg-print-copies this))
(rp:define-generic (rp:ww-comdlg-print-to-file? this))

(define rp:ww-comdlg-print-create
  (let ((optlist `((no-selection . ,(win:pd noselection)) (no-pagenums . ,(win:pd nopagenums))
		   (print-to-file . ,(win:pd printtofile)) (print-setup . ,(win:pd printsetup))
		   (no-warning . ,(win:pd nowarning)) (return-dc . ,(win:pd returndc)) (return-ic . ,(win:pd returnic))
		   (show-help . ,(win:pd showhelp)) (use-devmode-copies-and-collate . ,(win:pd usedevmodecopies))
		   (disable-print-to-file . ,(win:pd disableprinttofile))
		   (hide-print-to-file . ,(win:pd hideprinttofile)) (no-network-button . ,(win:pd nonetworkbutton)))))
    (rp:lambda-with-options ()
      ((options '()) (page-range #t) (page-range-min-max '(1 1)) (copy '(1 #f)) (template-module #f) (cust-data 0)
       (print-hook-procedure #f) (print-dialog-template #f) (print-tamplate-in-memory #f)
       (setup-hook-procedure #f) (setup-dialog-template #f) (setup-template-in-memory #f))
      (let ((invoked #f) (flags 0) (from-page 1) (to-page 1) (copies (rp:car copy))
	    (min-page (rp:car page-range-min-max)) (max-page (rp:car (rp:cdr page-range-min-max)))
	    (instance template-module) (print-hook #f) (setup-hook #f)
	    (print-template-name #f) (setup-template-name #f) (print-template-string #f) (setup-template-string #f)
	    (print-template print-tamplate-in-memory) (setup-template setup-template-in-memory))
	(define (add-flag-f f) (set! flags (rp:bitwise-or flags f)))
	(define-syntax add-flag (lambda (x) (syntax-case x () ((_ f) (syntax (add-flag-f (win:pd f)))))))
	(cond ((rp:eq? page-range #t) (add-flag allpages))
	      ((rp:eq? page-range 'selection) (add-flag selection))
	      (else (add-flag pagenums)
		    (set! from-page (rp:car page-range)) (set! to-page (rp:car (rp:cdr page-range)))))
	(if (rp:car (rp:cdr copy)) (add-flag collate))
	(if print-hook-procedure (begin (set! print-hook
					  (rp:make-entry cardinal
					    ((wnd buffer) (message cardinal) (wparam cardinal) (lparam integer))
					    (print-hook-procedure wnd message wparam lparam)))
					(add-flag enableprinthook)))
	(if setup-hook-procedure (begin (set! setup-hook
					  (rp:make-entry cardinal
					    ((wnd buffer) (message cardinal) (wparam cardinal) (lparam integer))
					    (setup-hook-procedure wnd message wparam lparam)))
					(add-flag enablesetuphook)))
	(if print-dialog-template
	  (if (rp:string? print-dialog-template)
	    (begin (set! print-template-name (rp:export-string print-dialog-template))
		   (set! print-template-string #t))
	    (set! print-template-name (rp:cast-integer->buffer print-dialog-template))))
	(if setup-dialog-template
	  (if (rp:string? setup-dialog-template)
	    (begin (set! setup-template-name (rp:export-string setup-dialog-template))
		   (set! setup-template-string #t))
	    (set! setup-template-name (rp:cast-integer->buffer setup-dialog-template))))
	(if (and template-module print-dialog-template) (add-flag enableprinttemplate))
	(if (and template-module setup-dialog-template) (add-flag enablesetuptemplate))
	(if print-tamplate-in-memory (add-flag enableprinttemplatehandle))
	(if setup-template-in-memory (add-flag enablesetuptemplatehandle))
	(rp:for-each (lambda (opt) (cond ((rp:assq opt optlist) => (lambda (p) (add-flag-f (rp:cdr p)))))) options)
	(let ((buf (win:printdlg-create (dev-mode #f) (dev-names #f) (flags flags)
					(from-page from-page) (to-page to-page) (min-page min-page) (max-page max-page)
					(copies copies)
					(instance instance) (cust-data cust-data)
					(print-hook print-hook) (setup-hook setup-hook)
					(print-template-name print-template-name)
					(setup-template-name setup-template-name)
					(print-template print-template) (setup-template setup-template))))
	  (define (turn-flag flag on?)
	    (win:printdlg-store-flags buf
	      (rp:bitwise-or (rp:bitwise-and (win:printdlg-load-flags buf) (rp:bitwise-invert flag))
			     (if on? flag 0))))
	  (define (get-flag flag) (rp:not (rp:zero? (rp:bitwise-and (win:printdlg-load-flags buf) flag))))
	  (rp:object-constructor ()
	    ((rp:ww-comdlg-print-destroy this)
	     (win:printdlg-let-values buf ((print-hook print-hook) (setup-hook setup-hook)
					   (print-template-name print-template-name)
					   (setup-template-name setup-template-name))
	       (if print-hook (rp:destroy-exported-procedure print-hook))
	       (if setup-hook (rp:destroy-exported-procedure setup-hook))
	       (if (and print-template-name print-template-string) (rp:destroy-external-buffer print-template-name))
	       (if (and setup-template-name setup-template-string) (rp:destroy-external-buffer setup-template-name)))
	     (rp:destroy-external-buffer buf))
	    ((rp:ww-comdlg-print-invoke this owner . opts)
	     (rp:apply
	       (rp:lambda-with-options (owner) ((return-default #f) (dev-mode '()) (dev-names '()) (cust-data #f)
						(page-range #f) (page-range-min-max #f) (copy #f) (print-to-file '())
						(print-setup '()) (return-dc '()) (return-ic '()))
		 (if return-default (begin (set! dev-mode #f) (set! dev-names #f)
					   (turn-flag (win:pd returndefault) #t)))
		 (win:printdlg-store-owner buf owner)
		 (if (rp:not (rp:eq? dev-mode '())) (win:printdlg-store-dev-mode buf dev-mode))
		 (if (rp:not (rp:eq? dev-names '())) (win:printdlg-store-dev-names buf dev-names))
		 (if cust-data (win:printdlg-store-cust-data buf cust-data))
		 (if page-range (cond ((rp:eq? page-range #t)
				       (turn-flag (win:pd pagenums) #f) (turn-flag (win:pd selection) #f))
				      ((rp:eq? page-range 'selection)
				       (turn-flag (win:pd pagenums) #f) (turn-flag (win:pd selection) #t))
				      (else (turn-flag (win:pd pagenums) #t) (turn-flag (win:pd selection) #f)
					    (win:printdlg-store-from-page buf (rp:car pagenums))
					    (win:printdlg-store-to-page buf (rp:car (rp:cdr pagenums))))))
		 (if page-range-min-max (begin (win:printdlg-store-min-page buf (rp:car page-range-min-max))
					       (win:printdlg-store-max-page buf (rp:car (rp:cdr page-range-min-max)))))
		 (if copy (begin (win:printdlg-store-copies buf (rp:car copy))
				 (turn-flag (win:pd collate) (rp:car (rp:cdr copy)))))
		 (if (rp:not (rp:eq? print-to-file '())) (turn-flag (win:pd printtofile) print-to-file))
		 (if (rp:not (rp:eq? print-setup '())) (turn-flag (win:pd printsetup) print-setup))
		 (if (rp:not (rp:eq? return-dc '())) (turn-flag (win:pd returndc) return-dc))
		 (if (rp:not (rp:eq? return-ic '())) (turn-flag (win:pd returnic) return-ic))
		 (let ((res (rp:win32api-print-dlg buf)))
		   (if return-default (turn-flag (win:pd returndefault) #f))
		   (if (rp:zero? res) #f
		     (begin (set! invoked #t)
			    (rp:list (win:printdlg-load-dev-mode buf) (win:printdlg-load-dev-names buf))))))
	       owner opts))
	    ((rp:ww-comdlg-print-dc this)
	     (if invoked (win:printdlg-load-dc buf) #f))
	    ((rp:ww-comdlg-print-page-range this)
	     (if invoked
	       (cond ((get-flag (win:pd pagenums))
		      (rp:list (win:printdlg-load-from-page buf) (win:printdlg-load-to-page buf)))
		     ((get-flag (win:pd selection)) 'selection)
		     (else #t))
	       #f))
	    ((rp:ww-comdlg-print-copies this)
	     (if invoked
	       (rp:list (win:printdlg-load-copies buf) (get-flag (win:pd collate)))
	       #f))
	    ((rp:ww-comdlg-print-to-file? this)
	     (if invoked (get-flag (win:pd printtofile)) '()))))))))

(rp:define-generic (rp:ww-printer-destroy this))
(rp:define-generic (rp:ww-printer-page-setup this wnd . opts))
(rp:define-generic (rp:ww-printer-print this wnd . opts))
(rp:define-generic (rp:ww-printer-print-ok? this dc wnd))
(rp:define-generic (rp:ww-printer-cancel-dialog-template this))
(rp:define-generic (rp:ww-printer-cancel-dialog-procedure this cencel))
(rp:define-generic (rp:ww-printer-abort-procedure this cancel-dialog message-loop continue))
(rp:define-generic (rp:ww-printer-document-name this))
(rp:define-generic (rp:ww-printer-render-document this dc cancel-dialog render-page abort))

(define rp:ww-printer-create
  (let ((cancel-template (rp:ww-make-dialog-template
			   `("Printing" 40 40 120 36 ((style ,(win:ws caption visible sysmenu)))
			     (0 static "Printing Document" 4 4 112 8 ((style ,(win:ss left))))
			     (,(win: idcancel) button "Cancel" 80 18 32 12
					((style ,(rp:bitwise-or (win:bs defpushbutton center) (win:ws tabstop)))))))))
    (rp:lambda-with-options ()
      ((page-setup-dialog-option '()) (page-setup-dialog-flags '())
       (print-dialog-option '()) (print-dialog-flags '()))
      (let ((dev-mode #f) (dev-names #f)
	    (page-setup-dialog (rp:apply rp:ww-comdlg-page-create
				 'options page-setup-dialog-flags page-setup-dialog-option))
	    (print-dialog (rp:apply rp:ww-comdlg-print-create
			    'options (rp:cons 'return-dc print-dialog-flags) print-dialog-option)))
	(rp:object-constructor ()
	  ((rp:ww-printer-destroy this)
	   (rp:ww-comdlg-page-destroy page-setup-dialog)
	   (rp:ww-comdlg-print-destroy print-dialog)
	   (if dev-mode (rp:win32api-global-free dev-mode))
	   (if dev-names (rp:win32api-global-gree dev-names)))
	  ((rp:ww-printer-page-setup this wnd . opts)
	   (let ((res (rp:apply rp:ww-comdlg-page-invoke page-setup-dialog wnd
							 'dev-mode dev-mode 'dev-names dev-names opts)))
	     (if res (begin (set! dev-mode (rp:car res))
			    (set! dev-names (rp:car (rp:cdr res)))
			    #t)
		     #f)))
	  ((rp:ww-printer-print this wnd . opts)
	   (let ((res (rp:apply rp:ww-comdlg-print-invoke print-dialog wnd
							  'dev-mode dev-mode 'dev-names dev-names opts)))
	     (if (rp:not res) #f
	       (begin
		 (set! dev-mode (rp:car res))
		 (set! dev-names (rp:car (rp:cdr res)))
		 (let ((pdc (rp:ww-comdlg-print-dc print-dialog)))
		   (if (rp:ww-printer-print-ok? this pdc wnd)
		     (letrec ((cont-print 1)
			      (cancel-dialog (rp:ww-dialog-create (rp:ww-printer-cancel-dialog-template this)
								  (rp:ww-printer-cancel-dialog-procedure this
								    (lambda () (set! cont-print 0))))))
		       (let ((cancel-dialog-hwnd (rp:ww-dialog-create-modeless cancel-dialog wnd 0))
			     (msg (win:msg-create)))
			 (rp:win32api-enable-window wnd 0)
			 (let ((fabort (rp:ww-printer-abort-procedure this cancel-dialog-hwnd
					 (lambda ()
					   (do () ((rp:zero? (rp:win32api-peek-message msg #f 0 0 (win:pm remove))))
					     (if (rp:zero? (rp:win32api-is-dialog-message cancel-dialog-hwnd msg))
					       (begin (rp:win32api-translate-message msg)
						      (rp:win32api-dispatch-message msg)))))
					 (lambda () cont-print))))
			   (let ((abort-proc (rp:make-entry integer ((dc buffer) (code integer)) (fabort dc code))))
			     (rp:win32api-set-abort-proc pdc abort-proc)
			     (let ((di (win:docinfo-create (rp:ww-printer-document-name this))))
			       (rp:win32api-start-doc pdc di)
			       (rp:destroy-external-buffer (win:docinfo-load-doc-name di))
			       (rp:destroy-external-buffer di))
			     (let ((res (rp:call-with-current-continuation
					  (lambda (escape)
					    (let ((abort (lambda () (rp:win32api-abort-doc pdc) (escape '()))))
					      (rp:ww-printer-render-document this pdc cancel-dialog-hwnd
						(lambda (proc) (if (rp:<= (rp:win32api-start-page pdc) 0) (abort))
							       (proc)
							       (if (rp:<= (rp:win32api-end-page pdc) 0) (abort)))
						abort))
					    (rp:win32api-end-doc pdc)
					    #t))))
			       (rp:win32api-enable-window wnd 1)
			       (rp:win32api-destroy-window cancel-dialog-hwnd)
			       (rp:win32api-delete-dc pdc)
			       (rp:ww-dialog-destroy cancel-dialog)
			       (rp:destroy-external-buffer msg)
			       (rp:destroy-exported-procedure abort-proc)
			       res)))))
		     (begin (rp:win32api-delete-dc pdc) '())))))))
	  ((rp:ww-printer-print-ok? this dc wnd) #t)
	  ((rp:ww-printer-cancel-dialog-template this) cancel-template)
	  ((rp:ww-printer-cancel-dialog-procedure this cencel)
	   (rp:ww-dialog-dispatcher (wnd message wparam lparam)
	     ((win:wm initdialog) 1)
	     ((win:wm command)
	      ((rp:ww-command-dispatcher (wnd id cmd ctl udat)
		 ((((win: idcancel)) *) (cancel)))
	       wnd wparam lparam #f)
	      1)))
	  ((rp:ww-printer-abort-procedure this cancel-dialog message-loop continue)
	   (lambda (dc code) (message-loop) (continue))))))))
