;;;; @(#)$Id: scrib.scm,v 1.2 1999/02/15 08:54:00 qfwfq Exp $

(rp:use-macro-package "w_base.scm")
(rp:use-macro-package "w_wstyle.scm")
(rp:use-macro-package "w_c_btn.scm")
(rp:use-macro-package "w_msg.scm")
(rp:use-macro-package "w_dc.scm")

(rp:eval-in-compiler-environment
  (rp:declare-constants idm
    (new 100) (open 101) (save 102) (save-as 103)
    (page-setup 200) (print 201)
    (exit 300)
    (undo 400)
    (about 500)))

(rp:define-generic (content-list this))
(rp:define-generic (add-elt this elt))
(rp:define-generic (remove-last this))

(define (bag-create)
  (let ((bag '()))
    (rp:object-constructor ()
      ((content-list this) (reverse bag))
      ((add-elt this elt) (set! bag (cons elt bag)))
      ((remove-last this) (if (not (null? bag)) (set! bag (cdr bag)))))))

(rp:define-generic (stroke-begin-path this coord wnd))
(rp:define-generic (stroke-add this coord wnd))
(rp:define-generic (stroke-end-path this))
(rp:define-generic (stroke-each-path this proc))
(rp:define-generic (stroke-undo this))
(rp:define-generic (stroke-modified? this))

(define (stroke-create)
  (let ((bag-of-prev (bag-create))
	(last-point #f)
	(current (bag-create))
	(pt (win:point-create))
	(modified #f))
    (let ((draw-process
	   (rp:create-channel
	     (lambda (getop)
	       (do ((op (getop) (getop))) (#f)
		 (if (eq? (car op) 'begin-path)
		   (begin (set! last-point (cdr op))
			  (add-elt current (cdr op))
			  (set! modified #t)
			  (do ((op (getop) (getop)))
			    ((eq? (car op) 'end-path)
			     (add-elt bag-of-prev (content-list current))
			     (set! last-point #f)
			     (set! current (bag-create)))
			    (if (eq? (car op) 'add)
			      (begin (set! last-point (cdr op))
				     (add-elt current (cdr op))))))))))))
      (rp:object-constructor
	((doc (rp:ww-document-create
		'dialog-option '(filters (("Scrawl Documents(*.scb)" "*.scb") ("All Files(*.*)" "*.*"))
				 custom-filter-title "Other Types"
				 default-suffix "scb")))
	 (print (rp:ww-printer-create 'page-setup-dialog-flags '(disable-margins)
				      'print-dialog-flags '(no-selection no-pagenums use-devmode-copies-and-collate))))
	((stroke-begin-path this coord wnd)
	 (stroke-end-path this)
	 (rp:locally ((dc (rp:win32api-get-dc wnd)))
		     ((rp:win32api-release-dc wnd dc))
	   (rp:win32api-set-map-mode dc (win:mm loenglish))
	   (win:point-set-values pt (x (car coord)) (y (cdr coord)))
	   (rp:win32api-dp-to-lp dc pt 1)
	   (win:point-let-values pt ((x x) (y y))
	     (draw-process (cons 'begin-path (cons x y))))))
	((stroke-add this coord wnd)
	 (if last-point
	   (rp:locally ((dc (rp:win32api-get-dc wnd)))
		       ((rp:win32api-release-dc wnd dc))
	     (rp:win32api-set-map-mode dc (win:mm loenglish))
	     (win:point-set-values pt (x (car coord)) (y (cdr coord)))
	     (rp:win32api-dp-to-lp dc pt 1)
	     (win:point-let-values pt ((x x) (y y))
	       (rp:win32api-move-to-ex dc (car last-point) (cdr last-point) #f)
	       (rp:win32api-line-to dc x y)
	       (draw-process (cons 'add (cons x y)))))))
	((stroke-end-path this)
	 (draw-process (cons 'end-path '())))
	((stroke-each-path this proc)
	 (for-each proc (content-list bag-of-prev))
	 (let ((cur-l (content-list current)))
	   (if (not (null? cur-l)) (proc cur-l))))
	((stroke-undo this)
	 (stroke-end-path this)
	 (remove-last bag-of-prev))
	((stroke-modified? this) modified)
	((rp:ww-document-new this)
	 (stroke-end-path this)
	 (set! bag-of-prev (bag-create))
	 (set! modified #f)
	 ((rp:proxy doc rp:ww-document-new) this))
	((rp:ww-document-load-from-handle this handle wnd filter-index extension-different?)
	 (stroke-end-path this)
	 (set! bag-of-prev (bag-create))
	 (rp:locally ((buffer (rp:make-external-buffer 1025)))
		     ((rp:destroy-external-buffer buffer))
	   (let ((ptr-nread (rp:skip-buffer-element buffer 4096))
		 (add-coord (rp:create-channel
			      (lambda (next-coord)
				(letrec ((get-segment (lambda (x y)
							(if (and (= x #x-80000000) (= y #x-80000000)) '()
							  (cons (cons x y) (apply get-segment (next-coord)))))))
				  (letrec ((get-fig (lambda ()
						      (add-elt bag-of-prev (apply get-segment (next-coord)))
						      (get-fig))))
				    (get-fig)))))))
	     (let loop ((i 0) (fill 0))
	       (cond ((< i (quotient fill 4))
		      (add-coord (list (rp:integer-array-load buffer i) (rp:integer-array-load buffer (+ i 1))))
		      (loop (+ i 2) fill))
		     ((= fill 4096) (loop 0 0))
		     (else
		      (if (zero? (rp:win32api-read-file
				   handle (rp:skip-buffer-element buffer fill) (- 4096 fill) ptr-nread #f))
			(rp:ww-windows-error)
			(let ((nread (rp:cardinal-array-load ptr-nread 0)))
			  (if (not (zero? nread)) (loop i (+ fill nread))))))))))
	 (set! modified #f))
	((rp:ww-document-save-to-handle this handle wnd filter-index extension-different?)
	 (stroke-end-path this)
	 (rp:locally ((buffer (rp:make-external-buffer 1025)))
		     ((rp:destroy-external-buffer buffer))
	   (let ((ptr-nwritten (rp:skip-buffer-element buffer 4096)) (i 0))
	     (let ((flush-buffer (lambda ()
				   (let retry ((written 0))
				     (if (> (* i 4) written)
				       (if (zero? (rp:win32api-write-file
						    handle (rp:skip-buffer-element buffer written) (- (* i 4) written)
						    ptr-nwritten #f))
					 (rp:ww-windows-error)
					 (retry (+ written (rp:cardinal-array-load ptr-nwritten 0)))))))))
	       (let ((put-coord (lambda (x y)
				  (if (= i 1024) (begin (flush-buffer) (set! i 0)))
				  (rp:integer-array-store buffer i x)
				  (rp:integer-array-store buffer (+ i 1) y)
				  (set! i (+ i 2)))))
		 (stroke-each-path this (lambda (l)
					  (for-each (lambda (coord) (put-coord (car coord) (cdr coord))) l)
					  (put-coord #x-80000000 #x-80000000)))
		 (flush-buffer)))))
	 (set! modified #f))
	((rp:ww-document-make-title this)
	 (string-append (rp:ww-document-get-title this "Untitled") " - Scrawl Pad"))
	((rp:ww-printer-document-name this) (rp:ww-document-make-title this))
	((rp:ww-printer-render-document this dc cancel-dialog render-page abort)
	 (render-page (lambda () (rp:win32api-set-map-mode dc (win:mm loenglish))
				 (rp:locally ((pen (rp:win32api-create-pen (win:ps solid) 1 0)))
					     ((rp:win32api-delete-object pen))
				   (rp:locally ((old-pen (rp:win32api-select-object dc pen)))
					       ((rp:win32api-select-object dc old-pen))
				     (draw this dc))))))))))

(define draw
  (let ((draw-rect (win:rect-create)))
    (lambda (stroke dc)
      (stroke-each-path stroke
	(lambda (path)
	  (for-each
	    (lambda (segment)
	      (let ((x1 (caar segment)) (y1 (cdar segment))
		    (x2 (cadr segment)) (y2 (cddr segment)))
		(if (<= x1 x2) (win:rect-set-values draw-rect (left x1) (right (+ x2 1)))
			       (win:rect-set-values draw-rect (left x2) (right (+ x1 1))))
		(if (<= y1 y2) (win:rect-set-values draw-rect (top y1) (bottom (+ y2 1)))
			       (win:rect-set-values draw-rect (top y2) (bottom (+ y1 1))))
		(if (not (zero? (rp:win32api-rect-visible dc draw-rect)))
		  (begin (rp:win32api-move-to-ex dc x1 y1 #f)
			 (rp:win32api-line-to dc x2 y2)))))
	    (if (null? path) '()
	      (let path->segments ((p1 (car path)) (tail (cdr path)))
		(if (null? tail) '()
		  (cons (cons p1 (car tail)) (path->segments (car tail) (cdr tail))))))))))))

(define draw-window
  (let ((ps (win:paintstruct-create)))
    (lambda (stroke wnd)
      (rp:ww-do-paint wnd ps
	(lambda (dc) (rp:win32api-set-map-mode dc (win:mm loenglish))
		     (draw stroke dc))))))

(define about-dlg
  (rp:ww-dialog-create
    (rp:ww-make-dialog-template
      `("About scrib" 40 40 160 44 ()
	(0 static "Rhizome/pi Scrawl pad demo" 4 4 152 8 ((style ,(win:ss center))))
	(0 static "$Id: scrib.scm,v 1.2 1999/02/15 08:54:00 qfwfq Exp $" 4 16 152 10 ((style ,(win:ss left sunken endellipsis))))
	(,(win: idok) button "OK" 70 30 20 10 ((style ,(win:bs defpushbutton center))))))
    (rp:ww-dialog-dispatcher (wnd message wparam lparam)
      ((win:wm initdialog) 1)
      ((win:wm command)
       ((rp:ww-command-dispatcher (wnd id cmd ctl udat)
	  ((((win: idok) (win: idcancel)) *) (rp:win32api-end-dialog wnd 0)))
	wnd wparam lparam #f)
       1))))

(define (make-coord lparam)
  (rp:ww-split-lparam lparam #t #t
    (lambda (lo hi) (cons lo hi))))

(define (query-save doc wnd)
  (if (stroke-modified? doc)
    (let ((r (rp:ww-message-box wnd "Save modified figure?"
				'caption "Scrib" 'icon 'exclamation 'buttons 'yes-no-cancel)))
      (cond ((= r (win: idyes)) (rp:ww-document-save-by-handle doc wnd))
	    ((= r (win: idno)) #t)
	    ((= r (win: idcancel)) #f)))
    #t))

(define the-class
  (rp:ww-make-window-class
    (rp:ww-message-dispatcher (wnd message wparam lparam)
      ((win:wm create)
       (rp:ww-set-user-data wnd lparam)
       (rp:ww-document-update-title (rp:ww-get-user-data wnd) wnd)
       0)
      ((win:wm destroy)
       (rp:ww-delete-user-data wnd)
       (rp:win32api-post-quit-message 0)
       0)
      ((win:wm close)
       (if (query-save (rp:ww-get-user-data wnd) wnd)
	 (rp:win32api-destroy-window wnd))
       0)
      ((win:wm queryendsession)
       (if (query-save (rp:ww-get-user-data wnd) wnd) 1 0))
      ((win:wm lbuttondown)
       (stroke-begin-path (rp:ww-get-user-data wnd) (make-coord lparam) wnd)
       0)
      ((win:wm lbuttonup)
       (let ((stroke (rp:ww-get-user-data wnd)))
	 (stroke-add stroke (make-coord lparam) wnd)
	 (stroke-end-path stroke))
       0)
      ((win:wm mousemove)
       (stroke-add (rp:ww-get-user-data wnd) (make-coord lparam) wnd)
       0)
      ((win:wm paint)
       (draw-window (rp:ww-get-user-data wnd) wnd)
       0)
      ((win:wm command)
       ((rp:ww-command-dispatcher (wnd id cmd ctl udat)
	  ((((idm new)) *) (if (query-save (rp:ww-get-user-data wnd) wnd)
			     (begin (rp:ww-document-new (rp:ww-get-user-data wnd))
				    (rp:ww-document-update-title (rp:ww-get-user-data wnd) wnd)
				    (rp:win32api-invalidate-rect wnd #f 1))))
	  ((((idm open)) *) (if (query-save (rp:ww-get-user-data wnd) wnd)
			      (begin (rp:ww-document-open-by-handle (rp:ww-get-user-data wnd) wnd)
				     (rp:ww-document-update-title (rp:ww-get-user-data wnd) wnd)
				     (rp:win32api-invalidate-rect wnd #f 1))))
	  ((((idm save)) *) (rp:ww-document-save-by-handle (rp:ww-get-user-data wnd) wnd)
			    (rp:ww-document-update-title (rp:ww-get-user-data wnd) wnd))
	  ((((idm save-as)) *) (rp:ww-document-save-as-by-handle (rp:ww-get-user-data wnd) wnd)
			       (rp:ww-document-update-title (rp:ww-get-user-data wnd) wnd))
	  ((((idm page-setup)) *) (rp:ww-printer-page-setup (rp:ww-get-user-data wnd) wnd))
	  ((((idm print)) *) (rp:ww-printer-print (rp:ww-get-user-data wnd) wnd))
	  ((((idm undo)) *) (stroke-undo (rp:ww-get-user-data wnd))
			    (rp:win32api-invalidate-rect wnd #f 1))
	  ((((idm about)) *) (rp:ww-dialog-do-modal about-dlg wnd 0))
	  ((((idm exit)) *) (rp:win32api-post-message wnd (win:wm close) 0 0)))
	wnd wparam lparam #f)
       0))))

(define the-menu
  (rp:ww-make-menu `(("&File"
		      (("&New" ,(idm new) ())
		       ("&Open..." ,(idm open) ())
		       ("&Save" ,(idm save) ())
		       ("Save &As..." ,(idm save-as) ())
		       (separator 0 ())
		       ("Page Se&tup..." ,(idm page-setup) ())
		       ("&Print..." ,(idm print) ())
		       (separator 0 ())
		       ("E&xit" ,(idm exit) ()))
		      ())
		     ("&Edit"
		      (("&Cancel Last Stroke	Ctrl+Z" ,(idm undo) ()))
		      ())
		     ("&Help"
		      (("&About..." ,(idm about) ()))
		      ()))))

(define the-accel (rp:ww-make-accelerator-table `(((virtkey control) ,(char->integer #\Z) ,(idm undo)))))

(define main-win
  (rp:ww-create-window the-class ""
    (let ((stroke (stroke-create)))
      (if (not (null? (cdr *invocation-arg*)))
	(rp:ww-document-load-from-file-by-handle stroke (cadr *invocation-arg*)))
      stroke)
    'menu the-menu))

(define main-loop (rp:ww-message-loop-create))
(rp:ww-message-loop-set-accelerator main-loop the-accel main-win)

(let ((x (rp:ww-message-loop-run main-loop)))
  (rp:ww-destroy-accelerator-table the-accel)
  (exit x))
