;;;; @(#)$Id: calcpad.scm,v 1.2 1999/02/15 08:53:58 qfwfq Exp $

(rp:use-macro-package "w_base.scm")
(rp:use-macro-package "w_msg.scm")
(rp:use-macro-package "w_wstyle.scm")
(rp:use-macro-package "w_c_edit.scm")
(rp:use-macro-package "w_c_btn.scm")
(rp:use-macro-package "w_dc.scm")
(rp:use-macro-package "w_draw.scm")
(rp:use-macro-package "w_wmove.scm")
(rp:use-macro-package "w_wstyle.scm")
(rp:use-macro-package "w_res.scm")
(rp:use-macro-package "w_key.scm")
(rp:use-macro-package "w_menu.scm")

(rp:eval-in-compiler-environment
  (begin
    (rp:declare-constants idm
      (new 100) (open 101) (save 102) (save-as 103)
      (exit 300)
      (next-item 400) (prev-item 401) (next-edit 410) (prev-edit 411) (full-recalc 450)
      (console 500)
      (about 600))
    (rp:declare-constants idc
      (caption 1000) (formula 1001))))

(rp:eval-in-compiler-environment
  (define-syntax grip-size (syntax-rules () ((_) 5))))

(rp:eval-in-compiler-environment
  (begin
    (define-syntax let-list
      (syntax-rules ()
	((_ ((var ...) l) body ...)
	 (apply (lambda (var ...) body ...) l))))
    (define-syntax let-coord
      (syntax-rules ()
	((_ ((x y) lparam) body ...)
	 (rp:ww-split-lparam lparam #t #t (lambda (x y) body ...)))))))

(define *sheet-width* 0)
(define *sheet-height* 0)

(define *text-width* 0)
(define *text-height* 0)
(define *text-spacing* 0)

(define (generate-caption template)
  (if (and template (not (rp:symbol-aux-datum (string->symbol template) #f)))
    template
    (let ((genstr (if template (lambda (i) (string-append template "~" (number->string i)))
			       (lambda (i) (string-append "<" (number->string i) ">")))))
      (let loop ((i 1))
	(let ((s (genstr i))) (if (rp:symbol-aux-datum (string->symbol s) #f) (loop (+ i 1)) s))))))

(rp:define-generic (calc-cell-destroy this))
(rp:define-generic (calc-cell-caption-string this))
(rp:define-generic (calc-cell-caption-buffer this))
(rp:define-generic (calc-cell-caption-length this))
(rp:define-generic (calc-cell-caption-set! this caption))
(rp:define-generic (calc-cell-caption-set-from-control this wnd))
(rp:define-generic (calc-cell-expression-string this))
(rp:define-generic (calc-cell-expression-buffer this))
(rp:define-generic (calc-cell-expression-length this))
(rp:define-generic (calc-cell-expression-set! this exp))
(rp:define-generic (calc-cell-expression-set-from-control this wnd))
(rp:define-generic (calc-cell-retain-self this cell))
(rp:define-generic (calc-cell-value-display this))
(rp:define-generic (calc-cell-recalc this))

(define calc-cell-create
  (let ((null-value (cons 'null '()))
	(error-mark (cons 'error '()))
	(null-proc (lambda x #f))
	(rect (win:rect-create))
	(get-edit-cch (lambda (wnd) (rp:win32api-send-message wnd (win:em linelength) 0 0)))
	(get-edit-buffer (lambda (wnd cch)
			   (let ((buf (rp:make-external-buffer (quotient (+ cch 4) 4))))
			     (rp:store-external-halfword buf 0 #t cch)
			     (rp:win32api-send-message wnd (win:em getline) 0 (rp:cast-buffer->integer buf))
			     (rp:store-external-chars buf cch "" #f)
			     buf))))
    (lambda (caption-string expression-string)
      (let ((caption-symbol (string->symbol caption-string))
	    (caption-buffer (rp:export-string caption-string))
	    (caption-length (string-length caption-string))
	    (expression-calc-proc #f)
	    (expression-buffer (rp:export-string (or expression-string "")))
	    (expression-length (if expression-string (string-length expression-string) 0))
	    (value-display null-proc)
	    (value-discard null-proc))
	(let ((make-calc-proc (lambda (str) (rp:catch-error
					      (lambda (err obj)
						(let ((result (cons error-mark (rp:error-message err obj))))
						  (lambda () result)))
					      (eval `(lambda () ,(rp:string->object str))))))
	      (textual-value (lambda (str)
			       (let ((text (rp:export-string str)))
				 (set! value-display
				   (lambda (dc w h)
				     (win:rect-set-values rect
				       (left (grip-size)) (top (grip-size))
				       (right (- w (grip-size))) (bottom (- h (grip-size))))
				     (rp:win32api-draw-text dc text -1 rect
				       (win:dt externalleading noprefix wordbreak))))
				 (set! value-discard (lambda () (rp:destroy-external-buffer text)))))))
	  (set! expression-calc-proc
	    (if expression-string (make-calc-proc expression-string)
				  (lambda () null-value)))
	  (rp:symbol-aux-datum-set! caption-symbol (cons null-value #f))
	  (rp:object-constructor ()
	    ((calc-cell-destroy this) (rp:destroy-external-buffer caption-buffer)
				      (rp:destroy-external-buffer expression-buffer)
				      (rp:symbol-aux-datum-set! caption-symbol #f)
				      (value-discard))
	    ((calc-cell-caption-string this) caption-string)
	    ((calc-cell-caption-buffer this) caption-buffer)
	    ((calc-cell-caption-length this) caption-length)
	    ((calc-cell-caption-set! this caption)
	     (let ((dat (rp:symbol-aux-datum caption-symbol))
		   (cap (generate-caption (if (symbol? caption) (symbol->string caption) caption))))
	       (rp:symbol-aux-datum-set! caption-symbol #f)
	       (rp:destroy-external-buffer caption-buffer)
	       (set! caption-string cap)
	       (set! caption-symbol (string->symbol cap))
	       (set! caption-buffer (rp:export-string cap))
	       (set! caption-length (string-length cap))
	       (rp:symbol-aux-datum-set! caption-symbol dat)
	       caption-symbol))
	    ((calc-cell-caption-set-from-control this wnd)
	     (let ((dat (rp:symbol-aux-datum caption-symbol)))
	       (rp:symbol-aux-datum-set! caption-symbol #f)
	       (rp:destroy-external-buffer caption-buffer)
	       (set! caption-length (get-edit-cch wnd))
	       (set! caption-buffer (get-edit-buffer wnd caption-length))
	       (set! caption-string (rp:load-external-chars caption-buffer 0 caption-length))
	       (set! caption-symbol (string->symbol caption-string))
	       (if (rp:symbol-aux-datum caption-symbol #f)
		 (begin (rp:destroy-external-buffer caption-buffer)
			(set! caption-string (generate-caption caption-string))
			(set! caption-symbol (string->symbol caption-string))
			(set! caption-buffer (rp:export-string caption-string))
			(set! caption-length (string-length caption-string))
			(rp:win32api-send-message wnd (win:wm settext) 0 (rp:cast-buffer->integer caption-buffer))))
	       (rp:symbol-aux-datum-set! caption-symbol dat)))
	    ((calc-cell-expression-string this) expression-string)
	    ((calc-cell-expression-buffer this) expression-buffer)
	    ((calc-cell-expression-length this) expression-length)
	    ((calc-cell-expression-set! this exp)
	     (rp:destroy-external-buffer expression-buffer)
	     (set! expression-string (rp:object->string exp))
	     (set! expression-length (string-length expression-string))
	     (set! expression-buffer (rp:export-string expression-string))
	     (set! expression-calc-proc (make-calc-proc expression-string)))
	    ((calc-cell-expression-set-from-control this wnd)
	     (rp:destroy-external-buffer expression-buffer)
	     (set! expression-length (get-edit-cch wnd))
	     (set! expression-buffer (get-edit-buffer wnd expression-length))
	     (set! expression-string (rp:load-external-chars expression-buffer 0 expression-length))
	     (set! expression-calc-proc (make-calc-proc expression-string)))
	    ((calc-cell-retain-self this cell) (set-cdr! (rp:symbol-aux-datum caption-symbol) cell))
	    ((calc-cell-value-display this) value-display)
	    ((calc-cell-recalc this)
	     (value-discard)
	     (let ((v (rp:catch-error
			(lambda (err obj) (cons error-mark (rp:error-message err obj)))
			(expression-calc-proc))))
	       (set-car! (rp:symbol-aux-datum caption-symbol) v)
	       (cond ((eq? v null-value)
		      (set! value-display null-proc)
		      (set! value-discard null-proc))
		     ((and (pair? v) (eq? (car v) error-mark))
		      (textual-value (string-append "Error: " (cdr v))))
		     (else
		      (textual-value (rp:object->string v))))))))))))

(define *doc-modified?* #f)
(define *doc-objlist* '())
(define *objlist-cur* #f)
(define *objlist-tail* #f)
(define *on-load-exp* #f)

(define (doc-erase)
  (do ((c *doc-objlist* (cdr c))) ((null? c)) (calc-cell-destroy (cdar c)))
  (set! *doc-modified?* #f)
  (set! *doc-objlist* '())
  (set! *objlist-cur* #f)
  (set! *objlist-tail* #f)
  (set! *on-load-exp* #f))

(define (doc-insert-obj obj mod?)
  (if mod? (set! *doc-modified?* #t))
  (let ((newcell (cons obj '())))
    (if *objlist-tail*
      (set-cdr! *objlist-tail* newcell)
      (set! *doc-objlist* newcell))
    (set! *objlist-tail* newcell)
    (calc-cell-retain-self (cdr obj) newcell)
    newcell))

(define (doc-delete-obj cell)
  (calc-cell-destroy (cdar cell))
  (if (not (null? *doc-objlist*))
    (if (eq? cell *doc-objlist*)
      (begin (set! *doc-modified?* #t)
	     (if (eq? cell *objlist-tail*) (set! *objlist-tail* #f))
	     (set! *doc-objlist* (cdr cell)))
      (let loop ((c *doc-objlist*))
	(cond ((null? (cdr c)))
	      ((eq? (cdr c) cell) (set! *doc-modified?* #t)
				  (if (eq? cell *objlist-tail*) (set! *objlist-tail* c))
				  (set-cdr! c (cdr cell)))
	      (else (loop (cdr c))))))))

(define (do-on-load wnd)
  (rp:catch-error (lambda (err obj) (rp:ww-message-box wnd (rp:error-message err obj) 'icon 'exclamation))
		  (eval *on-load-exp*)))

(define *pad-document*
  (rp:object-constructor
    ((doc (rp:ww-document-create
	    'dialog-option '(filters (("CalcPad Documents(*.cpd)" "*.cpd") ("All Files(*.*)" "*.*"))
			     custom-filter-title "Other Types"
			     default-suffix "cpd"))))
    ((rp:ww-document-new this)
     (doc-erase)
     ((rp:proxy doc rp:ww-document-new) this))
    ((rp:ww-document-load-from-port this port wnd filter-index extension-different?)
     (doc-erase)
     (set! *on-load-exp* (read port))
     (do ((obj (read port) (read port))) ((eof-object? obj))
       (doc-insert-obj (cons (car obj) (calc-cell-create (cadr obj) (caddr obj))) #f)))
    ((rp:ww-document-save-to-port this port wnd filter-index extension-different?)
     (set! *doc-modified?* #f)
     (write *on-load-exp* port) (newline port)
     (for-each (lambda (obj) (write (list (car obj)
					  (calc-cell-caption-string (cdr obj))
					  (calc-cell-expression-string (cdr obj)))
				    port)
			     (newline port))
       *doc-objlist*))
    ((rp:ww-document-make-title this)
     (string-append (rp:ww-document-get-title this "Untitled") " - Calculation Pad"))))

(if (not (null? (cdr *invocation-arg*)))
  (rp:ww-document-load-from-file-by-port *pad-document* (cadr *invocation-arg*)))

(define (make-new-object x0 y0 x1 y1 caption)
  (let ((x #f) (y #f) (cx #f) (cy #f))
    (if (< x0 x1) (begin (set! x x0) (set! cx (- x1 x0)))
		  (begin (set! x x1) (set! cx (- x0 x1))))
    (if (< y0 y1) (begin (set! y y0) (set! cy (- y1 y0)))
		  (begin (set! y y1) (set! cy (- y0 y1))))
    (doc-insert-obj (cons (vector x y cx cy) (calc-cell-create caption #f)) #t)))

(define *caption-editbox* #f)
(define *formula-editbox* #f)

(define redraw-cell
  (let ((rect (win:rect-create)))
    (lambda (wnd cell header-too?)
      (let ((extent (caar cell)))
	(let ((x (vector-ref extent 0)) (y (vector-ref extent 1))
	      (cx (vector-ref extent 2)) (cy (vector-ref extent 3)))
	  (if header-too?
	    (begin
	      (win:rect-set-values rect (left x) (top (- y (* *text-spacing* 2))) (right *sheet-width*) (bottom y))
	      (rp:win32api-invalidate-rect wnd rect 1)))
	  (win:rect-set-values rect (left x) (top y) (right (+ x cx)) (bottom (+ y cy)))
	  (rp:win32api-invalidate-rect wnd rect 1))))))

(define (recalc-cell cell wnd)
  (calc-cell-recalc (cdar cell))
  (redraw-cell wnd cell #f))

(define (recalc-from cell wnd)
  (do ((cell cell (cdr cell))) ((null? cell))
    (recalc-cell cell wnd)))

(define (select-object wnd cell)
  (if (not (eq? cell *objlist-cur*))
    (begin (if *objlist-cur*
	     (let ((cap-changed? (not (zero? (rp:win32api-send-message *caption-editbox* (win:em canundo) 0 0))))
		   (exp-changed? (not (zero? (rp:win32api-send-message *formula-editbox* (win:em canundo) 0 0)))))
	       (redraw-cell wnd *objlist-cur* #t)
	       (if cap-changed? (calc-cell-caption-set-from-control (cdar *objlist-cur*) *caption-editbox*))
	       (if exp-changed? (calc-cell-expression-set-from-control (cdar *objlist-cur*) *formula-editbox*))
	       (if exp-changed? (recalc-from *objlist-cur* wnd)
				(if cap-changed? (recalc-from (cdr *objlist-cur*) wnd)))))
	   (set! *objlist-cur* cell)
	   (if cell (let ((extent (caar cell)))
		      (let ((x (vector-ref extent 0)) (y (vector-ref extent 1)))
			(redraw-cell wnd cell #t)
			(rp:win32api-set-window-pos *caption-editbox* #f x (- y (* *text-spacing* 2)) 0 0
			  (win:swp nocopybits noredraw nosize nozorder showwindow))
			(rp:win32api-send-message *caption-editbox* (win:wm settext) 0
			  (rp:cast-buffer->integer (calc-cell-caption-buffer (cdar cell))))
			(rp:win32api-invalidate-rect *caption-editbox* #f 1)
			(rp:win32api-set-window-pos *formula-editbox* #f x (- y *text-spacing*) 0 0
			  (win:swp nocopybits noredraw nosize nozorder showwindow))
			(rp:win32api-send-message *formula-editbox* (win:wm settext) 0
			  (rp:cast-buffer->integer (calc-cell-expression-buffer (cdar cell))))
			(rp:win32api-invalidate-rect *formula-editbox* #f 1)))
		    (begin (rp:win32api-set-window-pos *caption-editbox* #f 0 0 0 0
			     (win:swp nocopybits noredraw nomove nosize nozorder hidewindow))
			   (rp:win32api-set-window-pos *formula-editbox* #f 0 0 0 0
			     (win:swp nocopybits noredraw nomove nosize nozorder hidewindow)))))))

(define (delete-cell wnd cell)
  (if (eq? cell *objlist-cur*)
    (select-object wnd #f)
    (redraw-cell wnd cell #t))
  (doc-delete-obj cell))

(define *status* 'ready)

(define drag-tracer
  (let ((rcbuf (win:rect-create)))
    (rp:create-channel
      (lambda (getop)
	(do ((op (getop) (getop))) (#f)
	  (case (car op)
	    ((resize)
	     (let-list ((stat wnd resize) op)
	       (let-list ((cursor x-move y-move) resize)
		 (let ((extent (caar *objlist-cur*)))
		   (set! *status* stat)
		   (rp:win32api-set-capture wnd)
		   (change-cursor cursor)
		   (set-cursor)
		   (let loop ((wnd-dc (rp:win32api-get-dc wnd))
			      (left (vector-ref extent 0)) (top (vector-ref extent 1))
			      (right (+ (vector-ref extent 0) (vector-ref extent 2)))
			      (bottom (+ (vector-ref extent 1) (vector-ref extent 3))))
		     (win:rect-set-values rcbuf (left left) (top top) (right right) (bottom bottom))
		     (rp:win32api-draw-focus-rect wnd-dc rcbuf)
		     (rp:win32api-release-dc wnd wnd-dc)
		     (let ((op (getop)))
		       (case (car op)
			 ((move release)
			  (let-list ((stat x y) op)
			    (let ((wnd-dc (rp:win32api-get-dc wnd)))
			      (rp:win32api-draw-focus-rect wnd-dc rcbuf)
			      (case x-move ((-) (set! left (max (min x right) 0)))
					   ((+) (set! right (max x left))))
			      (case y-move ((-) (set! top (max (min y bottom) (* *text-spacing* 2))))
					   ((+) (set! bottom (max y top))))
			      (if (eq? stat 'move)
				(loop wnd-dc left top right bottom)
				(begin (rp:win32api-release-dc wnd wnd-dc)
				       (rp:win32api-release-capture)
				       (set! *status* 'ready)
				       (set! *doc-modified?* #t)
				       (let ((cell *objlist-cur*))
					 (select-object wnd #f)
					 (vector-set! extent 0 left)
					 (vector-set! extent 1 top)
					 (vector-set! extent 2 (- right left))
					 (vector-set! extent 3 (- bottom top))
					 (select-object wnd cell)))))))
			 ((cancel)
			  (let ((wnd-dc (rp:win32api-get-dc wnd)))
			    (rp:win32api-draw-focus-rect wnd-dc rcbuf)
			    (rp:win32api-release-dc wnd wnd-dc)
			    (rp:win32api-release-capture)
			    (set! *status* 'ready))))))))))
	    ((move-obj)
	     (let-list ((stat wnd cell x y) op)
	       (let ((extent (caar cell)))
		 (let ((x-offset (- x (vector-ref extent 0))) (y-offset (- y (vector-ref extent 1)))
		       (cx (vector-ref extent 2)) (cy (vector-ref extent 3)))
		   (set! *status* stat)
		   (select-object wnd cell)
		   (rp:win32api-update-window wnd)
		   (rp:win32api-set-capture wnd)
		   (change-cursor 'move)
		   (set-cursor)
		   (let loop ((wnd-dc (rp:win32api-get-dc wnd)) (x (- x x-offset)) (y (- y y-offset)))
		     (win:rect-set-values rcbuf (left x) (top y) (right (+ x cx)) (bottom (+ y cy)))
		     (rp:win32api-draw-focus-rect wnd-dc rcbuf)
		     (rp:win32api-release-dc wnd wnd-dc)
		     (let ((op (getop)))
		       (case (car op)
			 ((move release)
			  (let-list ((stat x y) op)
			    (set! x (max x x-offset))
			    (set! y (max y (+ y-offset (* *text-spacing* 2))))
			    (let ((wnd-dc (rp:win32api-get-dc wnd)))
			      (rp:win32api-draw-focus-rect wnd-dc rcbuf)
			      (if (eq? stat 'move)
				(loop wnd-dc (- x x-offset) (- y y-offset))
				(begin (rp:win32api-release-dc wnd wnd-dc)
				       (rp:win32api-release-capture)
				       (set! *status* 'ready)
				       (set! *doc-modified?* #t)
				       (select-object wnd #f)
				       (vector-set! extent 0 (- x x-offset))
				       (vector-set! extent 1 (- y y-offset))
				       (select-object wnd cell))))))
			 ((cancel)
			  (let ((wnd-dc (rp:win32api-get-dc wnd)))
			    (rp:win32api-draw-focus-rect wnd-dc rcbuf)
			    (rp:win32api-release-dc wnd wnd-dc)
			    (rp:win32api-release-capture)
			    (set! *status* 'ready))))))))))
	    ((new-obj)
	     (let-list ((stat wnd x0 y0) op)
	       (set! *status* stat)
	       (rp:win32api-set-capture wnd)
	       (set! x0 (max x0 0))
	       (set! y0 (max y0 (* *text-spacing* 2)))
	       (let loop ((wnd-dc (rp:win32api-get-dc wnd)) (x x0) (y y0))
		 (let ((fx (< x x0)) (fy (< y y0)))
		   (if fx (win:rect-set-values rcbuf (left x) (right x0))
			  (win:rect-set-values rcbuf (left x0) (right x)))
		   (if fy (win:rect-set-values rcbuf (top y) (bottom y0))
			  (win:rect-set-values rcbuf (top y0) (bottom y)))
		   (change-cursor
		     (if (if fx fy (not fy)) 'size-nwse 'size-nesw))
		   (set-cursor))
		 (rp:win32api-draw-focus-rect wnd-dc rcbuf)
		 (rp:win32api-release-dc wnd wnd-dc)
		 (let ((op (getop)))
		   (case (car op)
		     ((move release)
		      (let-list ((stat x y) op)
			(set! x (max x 0))
			(set! y (max y (* *text-spacing* 2)))
			(let ((wnd-dc (rp:win32api-get-dc wnd)))
			  (rp:win32api-draw-focus-rect wnd-dc rcbuf)
			  (if (eq? stat 'move)
			    (loop wnd-dc x y)
			    (begin (rp:win32api-release-dc wnd wnd-dc)
				   (rp:win32api-release-capture)
				   (set! *status* 'ready)
				   (select-object wnd (make-new-object x0 y0 x y (generate-caption #f))))))))
		     ((cancel)
		      (let ((wnd-dc (rp:win32api-get-dc wnd)))
			(rp:win32api-draw-focus-rect wnd-dc rcbuf)
			(rp:win32api-release-dc wnd wnd-dc)
			(rp:win32api-release-capture)
			(set! *status* 'ready))))))))))))))

(define (draw-obj obj dc)
  (let ((extent (car obj)) (cell (cdr obj)))
    (rp:win32api-text-out dc 0 (- (* *text-spacing* 2))
			  (calc-cell-caption-buffer cell) (calc-cell-caption-length cell))
    (rp:win32api-text-out dc 0 (- *text-spacing*)
			  (calc-cell-expression-buffer cell) (calc-cell-expression-length cell))
    ((calc-cell-value-display cell) dc (vector-ref extent 2) (vector-ref extent 3))))

(define draw-frame
  (let ((rect (win:rect-create)))
    (define (set-grip-rect x y)
      (win:rect-set-values rect (left x) (top y) (right (+ x (grip-size))) (bottom (+ y (grip-size)))))
    (define (centric-pos w) (quotient (- w (grip-size)) 2))
    (define (opposite-pos w) (- w (grip-size)))
    (lambda (selected? cx cy dc)
      (rp:locally ((old-pen (rp:win32api-select-object dc (rp:win32api-get-stock-object (win: black-pen))))
		   (old-brush (rp:win32api-select-object dc (rp:win32api-get-stock-object (win: null-brush)))))
		  ((rp:win32api-select-object dc old-pen)
		   (rp:win32api-select-object dc old-brush))
	(rp:win32api-rectangle dc 0 0 cx cy))
      (if selected?
	(map (lambda (x y) (set-grip-rect x y) (rp:win32api-invert-rect dc rect))
	     (let ((x1 (centric-pos cx)) (x2 (opposite-pos cx))) (list 0 x1 x2 0 x2 0 x1 x2))
	     (let ((y1 (centric-pos cy)) (y2 (opposite-pos cy))) (list 0 0 0 y1 y1 y2 y2 y2)))))))

(define draw-window
  (let ((ps (win:paintstruct-create))
	(rect (win:rect-create)))
    (lambda (wnd)
      (rp:ww-do-paint wnd ps
	(lambda (dc)
	  (rp:win32api-set-bk-mode dc (win: transparent))
	  (do ((cell *doc-objlist* (cdr cell))) ((null? cell))
	    (let ((extent (caar cell)))
	      (let ((x (vector-ref extent 0)) (y (vector-ref extent 1))
		    (cx (vector-ref extent 2)) (cy (vector-ref extent 3)))
		(rp:win32api-set-viewport-org-ex dc x y #f)
		(win:rect-set-values rect (left 0) (top (- (* *text-spacing* 2))) (right cx) (bottom cy))
		(if (not (zero? (rp:win32api-rect-visible dc rect)))
		  (begin (draw-obj (car cell) dc)
			 (draw-frame (eq? cell *objlist-cur*) cx cy dc)))))))))))

(define (find-cell-at x y)
  (let loop ((cell *doc-objlist*))
    (if (null? cell) #f
      (let ((extent (caar cell)))
	(let ((x0 (vector-ref extent 0)) (y0 (vector-ref extent 1))
	      (cx (vector-ref extent 2)) (cy (vector-ref extent 3)))
	  (if (and (<= x0 x (+ x0 cx)) (<= y0 y (+ y0 cy)))
	    cell (loop (cdr cell))))))))

(define (test-resize-grips x y)
  (define (centric-pos a w) (+ a (quotient (- w (grip-size)) 2)))
  (define (opposite-pos a w) (+ a (- w (grip-size))))
  (define (in-grip-range a g) (<= g a (+ g (grip-size))))
  (if *objlist-cur*
    (let ((extent (caar *objlist-cur*)))
      (let ((x0 (vector-ref extent 0)) (y0 (vector-ref extent 1))
	    (cx (vector-ref extent 2)) (cy (vector-ref extent 3)))
	(let ((x1 (centric-pos x0 cx)) (x2 (opposite-pos x0 cx))
	      (y1 (centric-pos y0 cy)) (y2 (opposite-pos y0 cy)))
	  (cond ((in-grip-range y y0) (cond ((in-grip-range x x0) '(size-nwse - -))
					    ((in-grip-range x x1) '(size-ns #f -))
					    ((in-grip-range x x2) '(size-nesw + -))
					    (else #f)))
		((in-grip-range y y1) (cond ((in-grip-range x x0) '(size-we - #f))
					    ((in-grip-range x x2) '(size-we + #f))
					    (else #f)))
		((in-grip-range y y2) (cond ((in-grip-range x x0) '(size-nesw - +))
					    ((in-grip-range x x1) '(size-ns #f +))
					    ((in-grip-range x x2) '(size-nwse + +))
					    (else #f)))
		(else #f)))))
    #f))

(define about-dlg
  (rp:ww-dialog-create
    (rp:ww-make-dialog-template
      `("About CalcPad" 40 40 160 44 ()
	(0 static "Rhizome/pi Calculation pad demo" 4 4 152 8 ((style ,(win:ss center))))
	(0 static "$Id: calcpad.scm,v 1.2 1999/02/15 08:53:58 qfwfq Exp $" 4 16 152 10 ((style ,(win:ss left sunken endellipsis))))
	(,(win: idok) button "OK" 70 30 20 10 ((style ,(win:bs defpushbutton center))))))
    (rp:ww-dialog-dispatcher (wnd message wparam lparam)
      ((win:wm initdialog) 1)
      ((win:wm command)
       ((rp:ww-command-dispatcher (wnd id cmd ctl udat)
	  ((((win: idok) (win: idcancel)) *) (rp:win32api-end-dialog wnd 0)))
	wnd wparam lparam #f)
       1))))

(define change-cursor #f)
(define set-cursor #f)

(let ((current-cursor #f)
      (cursors (map (lambda (name id)
		      (cons name (rp:win32api-load-cursor #f (rp:cast-integer->buffer id))))
		    '(default move size-ns size-we size-nwse size-nesw)
		    `(,(win:idc arrow) ,(win:idc sizeall)
		      ,(win:idc sizens) ,(win:idc sizewe) ,(win:idc sizenwse) ,(win:idc sizenesw)))))
  (set! change-cursor (lambda (c) (set! current-cursor (cdr (assq c cursors)))))
  (set! set-cursor (lambda () (rp:win32api-set-cursor current-cursor))))

(define dragged?
  (let ((ptbuf (win:point-create)))
    (lambda (wnd x y)
      (win:point-set-values ptbuf (x x) (y y))
      (rp:win32api-client-to-screen wnd ptbuf)
      (win:point-let-values ptbuf ((x x) (y y))
	(not (zero? (rp:win32api-drag-detect wnd x y)))))))

(define with-client-coordinate
  (let ((ptbuf (win:point-create)))
    (lambda (wnd lparam proc)
      (let-coord ((x y) lparam)
	(win:point-set-values ptbuf (x x) (y y))
	(rp:win32api-screen-to-client wnd ptbuf)
	(win:point-let-values ptbuf ((x x) (y y)) (proc x y))))))

(define (query-save wnd)
  (if *doc-modified?*
    (let ((r (rp:ww-message-box wnd "Save modified sheet?"
				'caption "CalcPad" 'icon 'exclamation 'buttons 'yes-no-cancel)))
      (cond ((= r (win: idyes)) (rp:ww-document-save-by-port *pad-document* wnd))
	    ((= r (win: idno)) #t)
	    ((= r (win: idcancel)) #f)))
    #t))

(define (subclass-editbox wnd getb setb recalc-me?)
  (rp:ww-replace-window-procedure wnd
    (rp:ww-subclass-dispatcher (wnd message wparam lparam)
      ((win:wm char)
       (cond ((= wparam #x1b)
	      (if *objlist-cur*
		(rp:win32api-send-message wnd (win:wm settext) 0
		  (rp:cast-buffer->integer (getb (cdar *objlist-cur*)))))
	      0)
	     ((= wparam #x0d)
	      (if *objlist-cur*
		(begin (setb (cdar *objlist-cur*) wnd)
		       (rp:win32api-send-message wnd (win:em emptyundobuffer) 0 0)
		       (recalc-from (if recalc-me? *objlist-cur* (cdr *objlist-cur*))
				    (rp:win32api-get-parent wnd))))
	      0)
	     (else (rp:ww-call-base-procedure wnd message wparam lparam)))))))

(define editbox-get-width
  (let ((rc (win:rect-create (left 0) (top 0))))
    (lambda (wnd)
      (let ((cnt (rp:win32api-send-message wnd (win:em linelength) 0 0)))
	(if (zero? cnt) 0
	  (rp:locally ((dc (rp:win32api-get-dc wnd))
		       (txtb (rp:make-external-buffer (quotient (+ cnt 4) 4))))
		      ((rp:win32api-release-dc wnd dc)
		       (rp:destroy-external-buffer txtb))
	    (rp:store-external-halfword txtb 0 #t cnt)
	    (rp:win32api-send-message wnd (win:em getline) 0 (rp:cast-buffer->integer txtb))
	    (rp:win32api-draw-text dc txtb cnt rc (win:dt calcrect noprefix singleline))
	    (win:rect-load-right rc)))))))

(define *console-wnd* #f)

(define (console-repl iport oport)
  (let loop ()
    (rp:catch-error
      (lambda (err obj) (newline oport) (display (rp:error-message err obj) oport))
      (write (eval (begin (display "> " oport) (read iport))) oport))
    (newline oport) (loop)))

(define *console-class*
  (rp:ww-make-window-class
    (rp:ww-message-dispatcher (wnd message wparam lparam)
      ((win:wm create)
       (rp:ww-set-user-data wnd lparam)
       (set-car! (rp:ww-get-user-data wnd)
	 (rp:ww-create-terminal-window
	   console-repl
	   (rp:bitwise-or (win:ws visible hscroll vscroll) (win:es autohscroll autovscroll left))
	   0 0 0 0 wnd 0))
       0)
      ((win:wm destroy)
       ((cdar (rp:ww-get-user-data wnd)))
       (rp:ww-delete-user-data wnd)
       (set! *console-wnd* #f)
       0)
      ((win:wm setfocus) (rp:win32api-set-focus (caar (rp:ww-get-user-data wnd))) 0)
      ((win:wm size)
       (rp:ww-split-lparam lparam #f #f
	 (lambda (w h)
	   (rp:win32api-set-window-pos (caar (rp:ww-get-user-data wnd)) #f 0 0 w h (win:swp nozorder))))
       0))))

(define (create-console-window)
  (set! *console-wnd* (rp:ww-create-window *console-class* "CalcPad Console" (cons #f '()))))

(define-syntax ?
  (lambda (x)
    (syntax-case x ()
      ((_ name)
       (with-syntax ((sym (let ((x (syntax-object->datum (syntax name))))
			    (if (symbol? x) x (string->symbol x)))))
	 (syntax (car (rp:symbol-aux-datum 'sym))))))))

(define-syntax !
  (lambda (x)
    (syntax-case x ()
      ((_ name)
       (with-syntax ((sym (let ((x (syntax-object->datum (syntax name))))
			    (if (symbol? x) x (string->symbol x)))))
	 (syntax (cdr (rp:symbol-aux-datum 'sym))))))))

(define (calc:cell-position cell)
  (let ((v (caar cell))) (list (vector-ref v 0) (vector-ref v 1))))

(define (calc:cell-size cell)
  (let ((v (caar cell))) (list (vector-ref v 2) (vector-ref v 3))))

(define (calc:move-cell cell x y)
  (redraw-cell main-win cell #t)
  (let ((v (caar cell))) (vector-set! v 0 x) (vector-set! v 1 y))
  (redraw-cell main-win cell #t))

(define (calc:resize-cell cell w h)
  (redraw-cell main-win cell #t)
  (let ((v (caar cell))) (vector-set! v 2 w) (vector-set! v 3 h))
  (redraw-cell main-win cell #t))

(define (calc:recalc cell)
  (recalc-cell cell main-win))

(define (calc:recalc-bis cell)
  (recalc-from cell main-win))

(define (calc:recalc-all)
  (recalc-from *doc-objlist* main-win))

(define (calc:reload)
  (do-on-load main-win)
  (calc:recalc-all))

(define (calc:new-cell x y w h caption)
  (let ((cell (make-new-object x y (+ x w) (+ y h) (generate-caption caption))))
    (redraw-cell main-win cell #t)
    cell))

(define (calc:delete-cell cell)
  (delete-cell main-win cell))

(define (calc:select-cell cell)
  (select-object main-win cell))

(define (calc:set-caption cell caption)
  (redraw-cell main-win cell #t)
  (calc-cell-caption-set! (cdar cell) caption))

(define (calc:set-expression cell exp)
  (redraw-cell main-win cell #t)
  (calc-cell-expression-set! (cdar cell) exp))

(define-syntax calc:on-load
  (syntax-rules ()
    ((_ exp)
     (begin (set! *doc-modified?* #t)
	    (set! *on-load-exp* 'exp)
	    (calc:reload)))))

(define the-accel (rp:ww-make-accelerator-table `(((virtkey) ,(win:vk tab) ,(idm next-item))
						  ((virtkey shift) ,(win:vk tab) ,(idm prev-item))
						  ((virtkey) ,(win:vk down) ,(idm next-edit))
						  ((virtkey) ,(win:vk up) ,(idm prev-edit))
						  ((virtkey) ,(win:vk f5) ,(idm full-recalc)))))

(define main-loop (rp:ww-message-loop-create))

(define the-class
  (rp:ww-make-window-class
    (rp:ww-message-dispatcher (wnd message wparam lparam)
      ((win:wm create)
       (rp:ww-document-update-title *pad-document* wnd)
       (rp:locally ((dc (rp:win32api-get-dc wnd))
		    (tm (win:textmetric-create)))
		   ((rp:win32api-release-dc wnd dc)
		    (rp:destroy-external-buffer tm))
	 (rp:win32api-get-text-metrics dc tm)
	 (win:textmetric-let-values tm ((width tm-ave-char-width)
					(height tm-height)
					(leading tm-external-leading))
	   (set! *text-width* width)
	   (set! *text-height* height)
	   (set! *text-spacing* (+ height leading))))
       (set! *caption-editbox* (rp:ww-create-child-window "EDIT"
				 (rp:bitwise-or (win:ws border) (win:es autohscroll left))
				 0 0 (* *text-width* 10) *text-height* wnd (idc caption)))
       (subclass-editbox *caption-editbox* calc-cell-caption-buffer calc-cell-caption-set-from-control #f)
       (set! *formula-editbox* (rp:ww-create-child-window "EDIT"
				 (rp:bitwise-or (win:ws border) (win:es autohscroll left))
				 0 *text-spacing* (* *text-width* 20) *text-height* wnd (idc formula)))
       (subclass-editbox *formula-editbox* calc-cell-expression-buffer calc-cell-expression-set-from-control #t)
       (do-on-load wnd)
       (recalc-from *doc-objlist* wnd)
       0)
      ((win:wm destroy)
       (rp:win32api-post-quit-message 0)
       0)
      ((win:wm close)
       (if (query-save wnd) (rp:win32api-destroy-window wnd))
       0)
      ((win:wm queryendsession)
       (if (query-save wnd) 1 0))
      ((win:wm paint)
       (draw-window wnd)
       0)
      ((win:wm lbuttondown)
       (rp:win32api-set-focus wnd)
       (let-coord ((x y) lparam)
	 (if (dragged? wnd x y)
	   (cond ((test-resize-grips x y) => (lambda (resize) (drag-tracer (list 'resize wnd resize))))
		 ((find-cell-at x y) => (lambda (cell) (drag-tracer (list 'move-obj wnd cell x y))))
		 (else (drag-tracer (list 'new-obj wnd x y))))
	   (let ((cell (find-cell-at x y)))
	     (if cell (select-object wnd cell)))))
       0)
      ((win:wm lbuttonup)
       (let-coord ((x y) lparam)
	 (drag-tracer (list 'release x y)))
       0)
      ((win:wm mousemove)
       (let-coord ((x y) lparam)
	 (drag-tracer (list 'move x y)))
       0)
      ((win:wm keydown)
       (if (= wparam (win:vk delete))
	 (if (and (eq? *status* 'ready) *objlist-cur*)
	   (delete-cell wnd *objlist-cur*)
	   (rp:win32api-message-beep 0)))
       0)
      ((win:wm char)
       (if (= wparam #x1b) (drag-tracer (list 'cancel)))
       0)
      ((win:wm size)
       (if (or (= wparam (win:size restored)) (= wparam (win:size maximized)))
	 (rp:ww-split-lparam lparam #f #f
	   (lambda (w h) (set! *sheet-width* w)
			 (set! *sheet-height* h))))
       0)
      ((win:wm nchittest)
       (let ((v (rp:win32api-def-window-proc wnd message wparam lparam)))
	 (if (and (eq? *status* 'ready) (= v (win: htclient)))
	   (with-client-coordinate wnd lparam
	     (lambda (x y)
	       (let ((resize (test-resize-grips x y)))
		 (change-cursor (if resize (car resize) 'default))))))
	 v))
      ((win:wm setcursor)
       (rp:ww-split-lparam lparam #f #f
	 (lambda (hittest mouse-msg)
	   (if (= hittest (win: htclient))
	     (begin (set-cursor) 0)
	     (rp:win32api-def-window-proc wnd message wparam lparam)))))
      ((win:wm initmenupopup)
       (if (zero? (quotient lparam #x10000))
	 (rp:win32api-check-menu-item (rp:cast-cardinal->buffer wparam) (idm console)
	   (rp:bitwise-or (win:mf bycommand) (if *console-wnd* (win:mf checked) (win:mf unchecked)))))
       0)
      ((win:wm activate)
       (if (= (remainder wparam #x10000) (win:wa inactive))
	 (rp:ww-message-loop-set-accelerator main-loop #f #f)
	 (rp:ww-message-loop-set-accelerator main-loop the-accel wnd))
       (rp:win32api-def-window-proc wnd message wparam lparam))
      ((win:wm command)
       ((rp:ww-command-dispatcher (wnd id cmd ctl udat)
	  ((((idc caption) - (idc formula)) (win:en update))
	   (if *objlist-cur*
	     (let ((w (editbox-get-width ctl)) (x (vector-ref (caar *objlist-cur*) 0)))
	       (rp:win32api-set-window-pos ctl #f 0 0
		 (max (min (+ w *text-width*) (- *sheet-width* x)) (* *text-width* (if (= id (idc caption)) 10 20)))
		 *text-height* (win:swp nomove nozorder)))))
	  ((((idm new)) *) (if (query-save wnd)
			     (begin (select-object wnd #f)
				    (rp:ww-document-new *pad-document*)
				    (rp:ww-document-update-title *pad-document* wnd)
				    (rp:win32api-invalidate-rect wnd #f 1))))
	  ((((idm open)) *) (if (query-save wnd)
			      (begin (select-object wnd #f)
				     (rp:ww-document-open-by-port *pad-document* wnd)
				     (rp:ww-document-update-title *pad-document* wnd)
				     (do-on-load wnd)
				     (recalc-from *doc-objlist* wnd)
				     (rp:win32api-invalidate-rect wnd #f 1))))
	  ((((idm save)) *) (rp:ww-document-save-by-port *pad-document* wnd)
			    (rp:ww-document-update-title *pad-document* wnd))
	  ((((idm save-as)) *) (rp:ww-document-save-as-by-port *pad-document* wnd)
			       (rp:ww-document-update-title *pad-document* wnd))
	  ((((idm next-item)) *) (if (not (null? *doc-objlist*))
				   (select-object wnd (cond ((not *objlist-cur*) *doc-objlist*)
							    ((eq? *objlist-cur* *objlist-tail*) *doc-objlist*)
							    (else (cdr *objlist-cur*))))))
	  ((((idm prev-item)) *) (if (not (null? *doc-objlist*))
				   (select-object wnd (cond ((not *objlist-cur*) *objlist-tail*)
							    ((eq? *objlist-cur* *doc-objlist*) *objlist-tail*)
							    (else (do ((c *doc-objlist* (cdr c)))
								      ((eq? (cdr c) *objlist-cur*) c)))))))
	  ((((idm next-edit)) *) (if *objlist-cur*
				   (let ((focus (rp:win32api-get-focus)))
				     (cond ((rp:pointer=? focus *caption-editbox*)
					    (rp:win32api-set-focus *formula-editbox*))
					   ((rp:pointer=? focus *formula-editbox*)
					    (rp:win32api-set-focus wnd))
					   (else (rp:win32api-set-focus *caption-editbox*))))))
	  ((((idm prev-edit)) *) (if *objlist-cur*
				   (let ((focus (rp:win32api-get-focus)))
				     (cond ((rp:pointer=? focus *caption-editbox*)
					    (rp:win32api-set-focus wnd))
					   ((rp:pointer=? focus *formula-editbox*)
					    (rp:win32api-set-focus *caption-editbox*))
					   (else (rp:win32api-set-focus *formula-editbox*))))))
	  ((((idm full-recalc)) *) (recalc-from *doc-objlist* wnd))
	  ((((idm console)) *) (if *console-wnd* (rp:win32api-post-message *console-wnd* (win:wm close) 0 0)
						 (create-console-window)))
	  ((((idm about)) *) (rp:ww-dialog-do-modal about-dlg wnd 0))
	  ((((idm exit)) *) (rp:win32api-post-message wnd (win:wm close) 0 0)))
	wnd wparam lparam #f)
       0))
    'cursor #f))

(define the-menu
  (rp:ww-make-menu `(("&File"
		      (("&New" ,(idm new) ())
		       ("&Open..." ,(idm open) ())
		       ("&Save" ,(idm save) ())
		       ("Save &As..." ,(idm save-as) ())
		       (separator 0 ())
		       ("E&xit" ,(idm exit) ()))
		      ())
		     ("&Calc"
		      (("Full &Recalc	F5" ,(idm full-recalc) ()))
		      ())
		     ("&Window"
		      (("&Console" ,(idm console) ()))
		      ())
		     ("&Help"
		      (("&About..." ,(idm about) ()))
		      ()))))

(define main-win (rp:ww-create-window the-class "" #f
				      'style (win:ws overlappedwindow clipchildren) 'menu the-menu))

(let ((x (rp:ww-message-loop-run main-loop)))
  (rp:ww-destroy-accelerator-table the-accel)
  (exit x))
